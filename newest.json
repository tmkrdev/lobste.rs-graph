[{"short_id":"izk0ff","created_at":"2025-07-15T18:02:48.000-05:00","title":"Shipping WebGPU on Windows in Firefox 141","url":"https://mozillagfx.wordpress.com/2025/07/15/shipping-webgpu-on-windows-in-firefox-141/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"pbsds","user_is_author":false,"tags":["browsers","graphics"],"short_id_url":"https://lobste.rs/s/izk0ff","comments_url":"https://lobste.rs/s/izk0ff/shipping_webgpu_on_windows_firefox_141"},{"short_id":"mfv2r6","created_at":"2025-07-15T15:39:32.000-05:00","title":"JuliaScope: The Fractal Graphing Calculator","url":"https://www.juliascope.com/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"linkdd","user_is_author":false,"tags":["math","visualization"],"short_id_url":"https://lobste.rs/s/mfv2r6","comments_url":"https://lobste.rs/s/mfv2r6/juliascope_fractal_graphing_calculator"},{"short_id":"ppxfaq","created_at":"2025-07-15T15:31:01.000-05:00","title":"Helix 25.07 Highlights","url":"https://helix-editor.com/news/release-25-07-highlights/","score":17,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"dpassen","user_is_author":false,"tags":["editors"],"short_id_url":"https://lobste.rs/s/ppxfaq","comments_url":"https://lobste.rs/s/ppxfaq/helix_25_07_highlights"},{"short_id":"cfkz4y","created_at":"2025-07-15T15:05:35.000-05:00","title":"Compiler bootstrapping in Nixpkgs","url":"https://blog.obsidian.systems/compiler-bootstrapping-in-nixpkgs/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"puffnfresh","user_is_author":false,"tags":["nix"],"short_id_url":"https://lobste.rs/s/cfkz4y","comments_url":"https://lobste.rs/s/cfkz4y/compiler_bootstrapping_nixpkgs"},{"short_id":"dxq6ei","created_at":"2025-07-15T14:45:41.000-05:00","title":"asking gemini to write some cube code","url":"https://gist.github.com/izabera/788000830d104fa75cebc58e443239e3","score":1,"flags":1,"comment_count":0,"description":"","description_plain":"","submitter_user":"izabera","user_is_author":true,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/dxq6ei","comments_url":"https://lobste.rs/s/dxq6ei/asking_gemini_write_some_cube_code"},{"short_id":"zschiu","created_at":"2025-07-15T14:39:47.000-05:00","title":"Introducing go-cdc-chunkers: chunk and deduplicate everything","url":"https://plakar.io/posts/2025-07-11/introducing-go-cdc-chunkers-chunk-and-deduplicate-everything/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"poolpOrg","user_is_author":true,"tags":["go"],"short_id_url":"https://lobste.rs/s/zschiu","comments_url":"https://lobste.rs/s/zschiu/introducing_go_cdc_chunkers_chunk"},{"short_id":"dpbwfi","created_at":"2025-07-15T14:23:56.000-05:00","title":"Hazel: A live functional programming environment with typed holes","url":"https://github.com/hazelgrove/hazel","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"azhenley","user_is_author":false,"tags":["plt"],"short_id_url":"https://lobste.rs/s/dpbwfi","comments_url":"https://lobste.rs/s/dpbwfi/hazel_live_functional_programming"},{"short_id":"deydno","created_at":"2025-07-15T12:50:04.000-05:00","title":"Encrypting Files with Passkeys and age","url":"https://words.filippo.io/passkey-encryption/","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"mantej","user_is_author":false,"tags":["cryptography","security"],"short_id_url":"https://lobste.rs/s/deydno","comments_url":"https://lobste.rs/s/deydno/encrypting_files_with_passkeys_age"},{"short_id":"wajnta","created_at":"2025-07-15T12:30:55.000-05:00","title":"Wikipedia outage report for May's Pope traffic spike","url":"https://wikitech.wikimedia.org/wiki/Incidents/2025-05-08_Papal_announcement_traffic_surge","score":22,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"cdanis","user_is_author":true,"tags":["devops"],"short_id_url":"https://lobste.rs/s/wajnta","comments_url":"https://lobste.rs/s/wajnta/wikipedia_outage_report_for_may_s_pope"},{"short_id":"lkw9ys","created_at":"2025-07-15T10:37:35.000-05:00","title":"Adding lookbehinds to rust-lang/regex","url":"https://systemf.epfl.ch/blog/rust-regex-lookbehinds/","score":15,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"emschwartz","user_is_author":false,"tags":["rust"],"short_id_url":"https://lobste.rs/s/lkw9ys","comments_url":"https://lobste.rs/s/lkw9ys/adding_lookbehinds_rust_lang_regex"},{"short_id":"xtrbcc","created_at":"2025-07-15T10:21:20.000-05:00","title":"Happy 20th birthday Django! Here’s my talk on Django Origins from Django’s 10th","url":"https://simonwillison.net/2025/Jul/13/django-birthday/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"sharp","user_is_author":false,"tags":["python","web"],"short_id_url":"https://lobste.rs/s/xtrbcc","comments_url":"https://lobste.rs/s/xtrbcc/happy_20th_birthday_django_here_s_my_talk"},{"short_id":"c4yg4y","created_at":"2025-07-15T10:05:55.000-05:00","title":"A distributed systems reliability glossary","url":"https://antithesis.com/resources/reliability_glossary/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"eatonphil","user_is_author":false,"tags":["distributed","testing"],"short_id_url":"https://lobste.rs/s/c4yg4y","comments_url":"https://lobste.rs/s/c4yg4y/distributed_systems_reliability"},{"short_id":"ouvq8x","created_at":"2025-07-15T10:05:26.000-05:00","title":"Poor man's bitemporal data system in SQLite and Clojure","url":"https://www.evalapply.org/posts/poor-mans-time-oriented-data-system/index.html","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"adityaathalye","user_is_author":true,"tags":["clojure","databases"],"short_id_url":"https://lobste.rs/s/ouvq8x","comments_url":"https://lobste.rs/s/ouvq8x/poor_man_s_bitemporal_data_system_sqlite"},{"short_id":"xl4arr","created_at":"2025-07-15T09:53:54.000-05:00","title":"The sound of inevitability","url":"https://tomrenner.com/posts/llm-inevitabilism/","score":31,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"av","user_is_author":false,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/xl4arr","comments_url":"https://lobste.rs/s/xl4arr/sound_inevitability"},{"short_id":"pvbjui","created_at":"2025-07-15T08:42:42.000-05:00","title":"Death by a thousand slops","url":"https://daniel.haxx.se/blog/2025/07/14/death-by-a-thousand-slops/","score":90,"flags":0,"comment_count":20,"description":"","description_plain":"","submitter_user":"technetium","user_is_author":false,"tags":["security"],"short_id_url":"https://lobste.rs/s/pvbjui","comments_url":"https://lobste.rs/s/pvbjui/death_by_thousand_slops"},{"short_id":"8lqcxc","created_at":"2025-07-15T08:11:03.000-05:00","title":"Packages proxies","url":"https://blog.garambrogne.net/packages-proxies-en.html","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"athoune","user_is_author":true,"tags":["devops","performance"],"short_id_url":"https://lobste.rs/s/8lqcxc","comments_url":"https://lobste.rs/s/8lqcxc/packages_proxies"},{"short_id":"r5omhr","created_at":"2025-07-15T08:06:39.000-05:00","title":"OpenZFS Bug Ported to Zig","url":"https://andrewkelley.me/post/openzfs-bug-ported-zig.html","score":39,"flags":0,"comment_count":17,"description":"","description_plain":"","submitter_user":"mtlynch","user_is_author":false,"tags":["zig"],"short_id_url":"https://lobste.rs/s/r5omhr","comments_url":"https://lobste.rs/s/r5omhr/openzfs_bug_ported_zig"},{"short_id":"lnn00p","created_at":"2025-07-15T06:35:03.000-05:00","title":"How to Get Foreign Keys Horribly Wrong","url":"https://hakibenita.com/django-foreign-keys","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"Haki","user_is_author":true,"tags":["databases","python"],"short_id_url":"https://lobste.rs/s/lnn00p","comments_url":"https://lobste.rs/s/lnn00p/how_get_foreign_keys_horribly_wrong"},{"short_id":"f3vn7f","created_at":"2025-07-15T04:45:03.000-05:00","title":"Game of Trees Hub","url":"https://gothub.org/","score":19,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"gonzalo","user_is_author":false,"tags":["openbsd"],"short_id_url":"https://lobste.rs/s/f3vn7f","comments_url":"https://lobste.rs/s/f3vn7f/game_trees_hub"},{"short_id":"kssozd","created_at":"2025-07-15T04:35:16.000-05:00","title":"How I keep up with AI progress","url":"https://blog.nilenso.com/blog/2025/06/23/how-i-keep-up-with-ai-progress/","score":15,"flags":6,"comment_count":11,"description":"","description_plain":"","submitter_user":"atharva","user_is_author":true,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/kssozd","comments_url":"https://lobste.rs/s/kssozd/how_i_keep_up_with_ai_progress"},{"short_id":"zeuzlc","created_at":"2025-07-15T03:56:43.000-05:00","title":"Introducing TCP-in-UDP solution (eBPF)","url":"https://blog.mptcp.dev/2025/07/14/TCP-in-UDP.html","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"gioele","user_is_author":false,"tags":["linux","networking"],"short_id_url":"https://lobste.rs/s/zeuzlc","comments_url":"https://lobste.rs/s/zeuzlc/introducing_tcp_udp_solution_ebpf"},{"short_id":"goyein","created_at":"2025-07-15T03:13:21.000-05:00","title":"Automerge 3.0","url":"https://automerge.github.io/blog/automerge-3/","score":35,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"ehamberg","user_is_author":false,"tags":["distributed","release"],"short_id_url":"https://lobste.rs/s/goyein","comments_url":"https://lobste.rs/s/goyein/automerge_3_0"},{"short_id":"87dpsv","created_at":"2025-07-15T03:07:51.000-05:00","title":"Trying Guix: A Nixer's Impressions","url":"https://tazj.in/blog/trying-guix","score":52,"flags":0,"comment_count":10,"description":"","description_plain":"","submitter_user":"bhoot","user_is_author":false,"tags":["nix"],"short_id_url":"https://lobste.rs/s/87dpsv","comments_url":"https://lobste.rs/s/87dpsv/trying_guix_nixer_s_impressions"},{"short_id":"w8vouu","created_at":"2025-07-15T03:04:21.000-05:00","title":"When SIGTERM Does Nothing: A Postgres Mystery","url":"https://clickhouse.com/blog/sigterm-postgres-mystery","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"knl","user_is_author":false,"tags":["databases","debugging"],"short_id_url":"https://lobste.rs/s/w8vouu","comments_url":"https://lobste.rs/s/w8vouu/when_sigterm_does_nothing_postgres"},{"short_id":"pohsem","created_at":"2025-07-15T01:41:46.000-05:00","title":"Initial implementation of the experimental C++ Lifetime Safety Analysis (-Wexperimental-lifetime-safety) has just landed in Clang","url":"https://discourse.llvm.org/t/announcing-the-lifetime-safety-breakout-group/87333","score":18,"flags":0,"comment_count":2,"description":"\u003cp\u003eAn initial implementation of the experimental C++ Lifetime Safety Analysis (-Wexperimental-lifetime-safety) has just landed in Clang. The work was originally announced in the linked post with the following status:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cstrong\u003eLifetime Analysis: Current Status\u003c/strong\u003e\n\u003cp\u003eFor those not already familiar, we’re working on a new lifetime analysis in Clang to catch issues like use-after-scope or returning pointers to stack memory. The analysis is alias-based and draws inspiration from Rust’s borrow checker (specifically, \u003ca href=\"https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/\" rel=\"ugc\"\u003ePolonius\u003c/a\u003e). More details in the RFC: \u003ca href=\"https://discourse.llvm.org/t/rfc-intra-procedural-lifetime-analysis-in-clang/86291\" rel=\"ugc\"\u003ehttps://discourse.llvm.org/t/rfc-intra-procedural-lifetime-analysis-in-clang/86291\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eThe initial implementation targets intra-procedural analysis for C++ raw pointers. This keeps the surface area small while we iterate. Over time, we aim to enable this analysis by default in Clang, with both “permissive” and “strict” modes to balance noise and coverage.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe landed PR is this:\u003c/p\u003e\n\u003cp\u003eExample: [LifetimeSafety] Introduce intra-procedural analysis in Clang\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ecommit: \u003ca href=\"https://github.com/llvm/llvm-project/commit/3076794e924f\" rel=\"ugc\"\u003ehttps://github.com/llvm/llvm-project/commit/3076794e924f\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003ePR: \u003ca href=\"https://github.com/llvm/llvm-project/pull/142313\" rel=\"ugc\"\u003ehttps://github.com/llvm/llvm-project/pull/142313\u003c/a\u003e\n\u003c/li\u003e\n\u003cli\u003etest source code: \u003ca href=\"https://github.com/llvm/llvm-project/blob/3076794e924f30ae21d1a12f27b1e6349dfa5fc4/clang/test/Sema/warn-lifetime-safety-dataflow.cpp\" rel=\"ugc\"\u003ehttps://github.com/llvm/llvm-project/blob/3076794e924f30ae21d1a12f27b1e6349dfa5fc4/clang/test/Sema/warn-lifetime-safety-dataflow.cpp\u003c/a\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eKey Components\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eConceptual Model: Introduces the fundamental concepts of Loan, Origin, and Path to model memory borrows and the lifetime of pointers.\u003c/li\u003e\n\u003cli\u003eFact Generation: A frontend pass traverses the Clang CFG to generate a representation of lifetime-relevant events, such as pointer assignments, taking an address, and variables going out of scope.\u003c/li\u003e\n\u003cli\u003eTesting: llvm-lit tests validate the analysis by checking the generated facts.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/blockquote\u003e\n","description_plain":"An initial implementation of the experimental C++ Lifetime Safety Analysis (-Wexperimental-lifetime-safety) has just landed in Clang. The work was originally announced in the linked post with the following status:\r\n\r\n\u003e ### Lifetime Analysis: Current Status\r\n\u003e\r\n\u003e For those not already familiar, we’re working on a new lifetime analysis in Clang to catch issues like use-after-scope or returning pointers to stack memory. The analysis is alias-based and draws inspiration from Rust’s borrow checker (specifically, [Polonius](https://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/)). More details in the RFC: https://discourse.llvm.org/t/rfc-intra-procedural-lifetime-analysis-in-clang/86291\r\n\u003e\r\n\u003e The initial implementation targets intra-procedural analysis for C++ raw pointers. This keeps the surface area small while we iterate. Over time, we aim to enable this analysis by default in Clang, with both “permissive” and “strict” modes to balance noise and coverage.\r\n\r\nThe landed PR is this:\r\n\r\nExample: [LifetimeSafety] Introduce intra-procedural analysis in Clang\r\n- commit: https://github.com/llvm/llvm-project/commit/3076794e924f\r\n- PR: https://github.com/llvm/llvm-project/pull/142313\r\n- test source code: https://github.com/llvm/llvm-project/blob/3076794e924f30ae21d1a12f27b1e6349dfa5fc4/clang/test/Sema/warn-lifetime-safety-dataflow.cpp\r\n\r\n\u003e **Key Components**\r\n\u003e - Conceptual Model: Introduces the fundamental concepts of Loan, Origin, and Path to model memory borrows and the lifetime of pointers.\r\n\u003e - Fact Generation: A frontend pass traverses the Clang CFG to generate a representation of lifetime-relevant events, such as pointer assignments, taking an address, and variables going out of scope.\r\n\u003e - Testing: llvm-lit tests validate the analysis by checking the generated facts.","submitter_user":"aapoalas","user_is_author":false,"tags":["c++"],"short_id_url":"https://lobste.rs/s/pohsem","comments_url":"https://lobste.rs/s/pohsem/initial_implementation_experimental_c"}]