[{"short_id":"n0gngp","created_at":"2025-09-29T02:50:08.000-05:00","title":"Data on AI Models","url":"https://epoch.ai/data/ai-models","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"atharva","user_is_author":false,"tags":["ai"],"short_id_url":"https://lobste.rs/s/n0gngp","comments_url":"https://lobste.rs/s/n0gngp/data_on_ai_models"},{"short_id":"29vcxz","created_at":"2025-09-29T01:54:16.000-05:00","title":"Perhaps AI-based autocomplete optimizes for the wrong problem","url":"","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eI’m in my first month of a paid GitHub Copilot Pro subscription. I had great success using GPT 4.1 to translate a Haskell project into OCaml; GPT 4 saved a couple days of effort on a week-long task. (In reality, I routinely underestimate how long projects take, so I probably saved a much larger amount of time). From there it was easy to pay for the first month of Copilot ($10 USD/mo). But I quickly realized that asking Copilot to do anything was very disruptive. I don’t do well with interrupt-driven development; I have a productive mental zone that takes several minutes to enter, and asking questions to an LLM breaks that zone. So my first month of LLMs has been trimmed down to just autocomplete in VS Code.\u003c/p\u003e\n\u003cp\u003eOne of my current tasks is to test a home-brewed, JSON build system. And one of my tests is to download, extract and normalize uutils (Rust-ified versions of \u003ccode\u003els\u003c/code\u003e, \u003ccode\u003efind\u003c/code\u003e, etc.) for multiple architectures. And no surprise, I quickly found my build scripts were repeating mostly the same thing with slight variations. I start typing the first item in a JSON array:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"get-asset-file CommonsBase_Std.Coreutils.Assets@0.2.2\n   -p coreutils-0.2.2-aarch64-apple-darwin.tar.gz\n   -f coreutils.File.Darwin_arm64.tar.gz\",\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eand Copilot fills out the other JSON items:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\"get-asset-file CommonsBase_Std.Coreutils.Assets@0.2.2\n   -p coreutils-0.2.2-x86_64-apple-darwin.tar.gz\n   -f coreutils.File.Darwin_x86_64.tar.gz\",\n\"get-asset-file CommonsBase_Std.Coreutils.Assets@0.2.2\n   -p coreutils-0.2.2-aarch64-unknown-linux-gnu.tar.gz\n   -f coreutils.File.Linux_arm64_gnu.tar.gz\",\n... 6 more ...\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe auto-complete was accurate; in fact, it was more accurate than I would be. It also saved me lots of typing, and as an unapologetically lazy programmer I \u003cem\u003emight\u003c/em\u003e call that a win.\u003c/p\u003e\n\u003cp\u003eBut it was not a win. The repetition was the direct result of the structural deficiency with overly simple build systems: they lack looping constructs. The proper thing to do is to use a loop over a map/table/dictionary, and in my case in particular that means I must do the grunt work of integrating some small language like Lua that can do loops. Does Copilot suggest the right thing? Of course not, at least without me prompting it first.\u003c/p\u003e\n\u003cp\u003eDeeper thought: Conventional next-token prediction trains LLMs to \u003cem\u003eproduce\u003c/em\u003e words, not remove words. In our childhood training to become effective communicators, we learn when producing words is necessary; we also learn brevity. And as software engineers, we learn brevity is a good thing as we reduce repetitive lines of code into a loop.\u003c/p\u003e\n\u003cp\u003eMy first month: I have never seen the LLM autocomplete a repetitive block of code into a simpler loop. So, I’d love to see an explicit counter-bias during training to simplify and remove words. I \u003cem\u003ecould\u003c/em\u003e ask the LLM to simplify code. That might work (though not because the model is structurally aware of how to simplify code). Regardless, if I’m going to pay for a tool to suggest things to me, I shouldn’t have to suggest code simplification to the code suggestor.\u003c/p\u003e\n\u003cp\u003eI’m going to keep paying the $10 even if I don’t find auto-complete that useful. Copilot has already paid for itself. But I’m left thinking that today’s LLMs have over-indexed on the wrong objective.\u003c/p\u003e\n\u003cp\u003eThoughts?\u003c/p\u003e\n","description_plain":"I'm in my first month of a paid GitHub Copilot Pro subscription. I had great success using GPT 4.1 to translate a Haskell project into OCaml; GPT 4 saved a couple days of effort on a week-long task. (In reality, I routinely underestimate how long projects take, so I probably saved a much larger amount of time). From there it was easy to pay for the first month of Copilot ($10 USD/mo). But I quickly realized that asking Copilot to do anything was very disruptive. I don't do well with interrupt-driven development; I have a productive mental zone that takes several minutes to enter, and asking questions to an LLM breaks that zone. So my first month of LLMs has been trimmed down to just autocomplete in VS Code.\r\n\r\nOne of my current tasks is to test a home-brewed, JSON build system. And one of my tests is to download, extract and normalize uutils (Rust-ified versions of `ls`, `find`, etc.) for multiple architectures. And no surprise, I quickly found my build scripts were repeating mostly the same thing with slight variations. I start typing the first item in a JSON array:\r\n\r\n    \"get-asset-file CommonsBase_Std.Coreutils.Assets@0.2.2\r\n       -p coreutils-0.2.2-aarch64-apple-darwin.tar.gz\r\n       -f coreutils.File.Darwin_arm64.tar.gz\",\r\n\r\nand Copilot fills out the other JSON items:\r\n\r\n    \"get-asset-file CommonsBase_Std.Coreutils.Assets@0.2.2\r\n       -p coreutils-0.2.2-x86_64-apple-darwin.tar.gz\r\n       -f coreutils.File.Darwin_x86_64.tar.gz\",\r\n    \"get-asset-file CommonsBase_Std.Coreutils.Assets@0.2.2\r\n       -p coreutils-0.2.2-aarch64-unknown-linux-gnu.tar.gz\r\n       -f coreutils.File.Linux_arm64_gnu.tar.gz\",\r\n    ... 6 more ...\r\n\r\nThe auto-complete was accurate; in fact, it was more accurate than I would be. It also saved me lots of typing, and as an unapologetically lazy programmer I *might* call that a win.\r\n\r\nBut it was not a win. The repetition was the direct result of the structural deficiency with overly simple build systems: they lack looping constructs. The proper thing to do is to use a loop over a map/table/dictionary, and in my case in particular that means I must do the grunt work of integrating some small language like Lua that can do loops. Does Copilot suggest the right thing? Of course not, at least without me prompting it first.\r\n\r\nDeeper thought: Conventional next-token prediction trains LLMs to *produce* words, not remove words. In our childhood training to become effective communicators, we learn when producing words is necessary; we also learn brevity. And as software engineers, we learn brevity is a good thing as we reduce repetitive lines of code into a loop.\r\n\r\nMy first month: I have never seen the LLM autocomplete a repetitive block of code into a simpler loop. So, I'd love to see an explicit counter-bias during training to simplify and remove words. I *could* ask the LLM to simplify code. That might work (though not because the model is structurally aware of how to simplify code). Regardless, if I'm going to pay for a tool to suggest things to me, I shouldn't have to suggest code simplification to the code suggestor.\r\n\r\nI'm going to keep paying the $10 even if I don't find auto-complete that useful. Copilot has already paid for itself. But I'm left thinking that today's LLMs have over-indexed on the wrong objective.\r\n\r\nThoughts?","submitter_user":"jbeckford","user_is_author":true,"tags":["ai"],"short_id_url":"https://lobste.rs/s/29vcxz","comments_url":"https://lobste.rs/s/29vcxz/perhaps_ai_based_autocomplete_optimizes"},{"short_id":"x1sdu5","created_at":"2025-09-29T01:42:58.000-05:00","title":"F-Droid and Google's Developer Registration Decree","url":"https://f-droid.org/2025/09/29/google-developer-registration-decree.html","score":24,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"laktak","user_is_author":false,"tags":["android"],"short_id_url":"https://lobste.rs/s/x1sdu5","comments_url":"https://lobste.rs/s/x1sdu5/f_droid_google_s_developer_registration"},{"short_id":"jbaxru","created_at":"2025-09-29T00:59:35.000-05:00","title":"Comparing Rust to Carbon","url":"https://lwn.net/Articles/1036912/","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"ucirello","user_is_author":false,"tags":["rust"],"short_id_url":"https://lobste.rs/s/jbaxru","comments_url":"https://lobste.rs/s/jbaxru/comparing_rust_carbon"},{"short_id":"ogs7d1","created_at":"2025-09-28T23:47:47.000-05:00","title":"Slop Machines: on the interaction between feed recommender systems and genai","url":"https://notes.hella.cheap/slop-machines.html","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"bobpoekert","user_is_author":true,"tags":["ai"],"short_id_url":"https://lobste.rs/s/ogs7d1","comments_url":"https://lobste.rs/s/ogs7d1/slop_machines_on_interaction_between"},{"short_id":"olfuo0","created_at":"2025-09-28T23:07:21.000-05:00","title":"Just Let Me Select Text","url":"https://aartaka.me/select-text.html","score":20,"flags":0,"comment_count":5,"description":"","description_plain":"","submitter_user":"rbr","user_is_author":false,"tags":["a11y"],"short_id_url":"https://lobste.rs/s/olfuo0","comments_url":"https://lobste.rs/s/olfuo0/just_let_me_select_text"},{"short_id":"trzzcd","created_at":"2025-09-28T18:22:35.000-05:00","title":"In C++ modules globally unique module names seem to be unavoidable","url":"https://nibblestew.blogspot.com/2025/09/in-c-modules-globally-unique-module.html","score":9,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"fanf","user_is_author":false,"tags":["c++"],"short_id_url":"https://lobste.rs/s/trzzcd","comments_url":"https://lobste.rs/s/trzzcd/c_modules_globally_unique_module_names"},{"short_id":"b4zqs1","created_at":"2025-09-28T18:02:48.000-05:00","title":"RISC-V Conditional Moves","url":"https://www.corsix.org/content/riscv-conditional-moves","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"fanf","user_is_author":false,"tags":["assembly"],"short_id_url":"https://lobste.rs/s/b4zqs1","comments_url":"https://lobste.rs/s/b4zqs1/risc_v_conditional_moves"},{"short_id":"dkjswm","created_at":"2025-09-28T16:50:45.000-05:00","title":"stupid jj tricks","url":"https://andre.arko.net/2025/09/28/stupid-jj-tricks/","score":45,"flags":0,"comment_count":13,"description":"","description_plain":"","submitter_user":"knl","user_is_author":false,"tags":["vcs"],"short_id_url":"https://lobste.rs/s/dkjswm","comments_url":"https://lobste.rs/s/dkjswm/stupid_jj_tricks"},{"short_id":"cqlfab","created_at":"2025-09-28T15:42:55.000-05:00","title":"Supply chain security for the 0.001% (and why it won’t catch on)","url":"https://blog.viraptor.info/post/supply-chain-security-for-the-0001-and-why-it-wont-catch-on","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"viraptor","user_is_author":true,"tags":["mac","security"],"short_id_url":"https://lobste.rs/s/cqlfab","comments_url":"https://lobste.rs/s/cqlfab/supply_chain_security_for_0_001_why_it_won_t"},{"short_id":"u6bxmq","created_at":"2025-09-28T15:06:48.000-05:00","title":"c-sigma: Easy-to-use Sigma proofs in C using libsodium","url":"https://github.com/jedisct1/c-sigma","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"linkdd","user_is_author":false,"tags":["c","cryptography","programming"],"short_id_url":"https://lobste.rs/s/u6bxmq","comments_url":"https://lobste.rs/s/u6bxmq/c_sigma_easy_use_sigma_proofs_c_using"},{"short_id":"ijemcw","created_at":"2025-09-28T14:58:30.000-05:00","title":"Tag suggestion: plan9","url":"","score":29,"flags":0,"comment_count":1,"description":"\u003cp\u003eNothing came out \u003ca href=\"https://lobste.rs/s/wqlsnt/tag_suggestion_plan9\" rel=\"ugc\"\u003elast time\u003c/a\u003e, but many years passed, so maybe it will work this time.\u003c/p\u003e\n\u003cp\u003eThe reason is that I wanted to make you aware of the \u003ca href=\"https://sdf.org/plan9/\" rel=\"ugc\"\u003eSDF Plan 9 Boot Camp\u003c/a\u003e. Currently there doesn’t appear to be fitting tag.\u003c/p\u003e\n\u003cp\u003eWe also have quite a few stories that end up only being tagged \u003ca href=\"https://9front.org/releases/2025/04/26/0/\" rel=\"ugc\"\u003erelease\u003c/a\u003e, \u003ca href=\"https://orib.dev/selfhost.html\" rel=\"ugc\"\u003epractice\u003c/a\u003e or osdev. How many aren’t strictly osdev, so it actually ends up “polluting” that tag.\u003c/p\u003e\n\u003cp\u003eMany more example can be found \u003ca href=\"https://lobste.rs/search?q=9front\u0026amp;what=stories\u0026amp;order=newest\" rel=\"ugc\"\u003esearching for 9front\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI’d suggest this tag to be a catch all for Plan 9, 9Front, Inferno etc. and make that clear in the description.\u003c/p\u003e\n\u003cp\u003eI think it could also be useful for things like ported Plan 9 software (acme, etc.), maybe even things like 9P, though I guess there \u003ccode\u003enetworking\u003c/code\u003e would be a better tag.\u003c/p\u003e\n","description_plain":"Nothing came out [last time](https://lobste.rs/s/wqlsnt/tag_suggestion_plan9), but many years passed, so maybe it will work this time.\r\n\r\nThe reason is that I wanted to make you aware of the [SDF Plan 9 Boot Camp](https://sdf.org/plan9/). Currently there doesn't appear to be fitting tag.\r\n\r\nWe also have quite a few stories that end up only being tagged [release](https://9front.org/releases/2025/04/26/0/), [practice](https://orib.dev/selfhost.html) or osdev. How many aren't strictly osdev, so it actually ends up \"polluting\" that tag.\r\n\r\nMany more example can be found [searching for 9front](https://lobste.rs/search?q=9front\u0026what=stories\u0026order=newest).\r\n\r\nI'd suggest this tag to be a catch all for Plan 9, 9Front, Inferno etc. and make that clear in the description.\r\n\r\nI think it could also be useful for things like ported Plan 9 software (acme, etc.), maybe even things like 9P, though I guess there `networking` would be a better tag.","submitter_user":"reezer","user_is_author":true,"tags":["meta"],"short_id_url":"https://lobste.rs/s/ijemcw","comments_url":"https://lobste.rs/s/ijemcw/tag_suggestion_plan9"},{"short_id":"sh9xga","created_at":"2025-09-28T14:09:20.000-05:00","title":"J-Link Compact USB-C Issues","url":"https://alvarop.com/2025/09/j-link-compact-usb-c-issues/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"gerikson","user_is_author":false,"tags":["hardware"],"short_id_url":"https://lobste.rs/s/sh9xga","comments_url":"https://lobste.rs/s/sh9xga/j_link_compact_usb_c_issues"},{"short_id":"mecofu","created_at":"2025-09-28T13:31:21.000-05:00","title":"tcmalloc's Temeraire: A Hugepage-Aware Allocator","url":"https://paulcavallaro.com/blog/tcmalloc-temeraire-hugepage-aware-allocator/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"orib","user_is_author":false,"tags":["performance","programming"],"short_id_url":"https://lobste.rs/s/mecofu","comments_url":"https://lobste.rs/s/mecofu/tcmalloc_s_temeraire_hugepage_aware"},{"short_id":"vhsrhh","created_at":"2025-09-28T13:09:43.000-05:00","title":"NES Super Mario Bros. \"arbitrary code execution\"","url":"https://tasvideos.org/8991S","score":17,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"spiiin","user_is_author":false,"tags":["games","retrocomputing","reversing"],"short_id_url":"https://lobste.rs/s/vhsrhh","comments_url":"https://lobste.rs/s/vhsrhh/nes_super_mario_bros_arbitrary_code"},{"short_id":"nn17bl","created_at":"2025-09-28T11:46:22.000-05:00","title":"Testing \"exotic\" p2p VPN","url":"https://blog.nommy.moe/blog/exotic-mesh-vpn/","score":12,"flags":0,"comment_count":4,"description":"","description_plain":"","submitter_user":"cheese","user_is_author":false,"tags":["distributed","networking","privacy"],"short_id_url":"https://lobste.rs/s/nn17bl","comments_url":"https://lobste.rs/s/nn17bl/testing_exotic_p2p_vpn"},{"short_id":"opoa2i","created_at":"2025-09-28T11:40:35.000-05:00","title":"Avalanche Studios NYC Retrospective – An Ambitious Company Ruined by Bad Development Practices","url":"https://probablydance.com/2025/09/28/avalanche-studios-nyc-retrospective-an-ambitious-company-ruined-by-bad-development-practices/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"rsaarelm","user_is_author":false,"tags":["culture","games","testing"],"short_id_url":"https://lobste.rs/s/opoa2i","comments_url":"https://lobste.rs/s/opoa2i/avalanche_studios_nyc_retrospective"},{"short_id":"gchwhh","created_at":"2025-09-28T11:13:36.000-05:00","title":"Why I'm not rushing to take sides in the RubyGems fiasco","url":"https://justin.searls.co/posts/why-im-not-rushing-to-take-sides-in-the-rubygems-fiasco/","score":25,"flags":6,"comment_count":39,"description":"","description_plain":"","submitter_user":"UkiahSmith","user_is_author":false,"tags":["ruby"],"short_id_url":"https://lobste.rs/s/gchwhh","comments_url":"https://lobste.rs/s/gchwhh/why_i_m_not_rushing_take_sides_rubygems"},{"short_id":"jki8jl","created_at":"2025-09-28T11:09:23.000-05:00","title":"What is \"good taste\" in software engineering?","url":"https://www.seangoedecke.com/taste/","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"rsaarelm","user_is_author":false,"tags":["programming"],"short_id_url":"https://lobste.rs/s/jki8jl","comments_url":"https://lobste.rs/s/jki8jl/what_is_good_taste_software_engineering"},{"short_id":"boxrhr","created_at":"2025-09-28T11:00:14.000-05:00","title":"Failing to Understand the Exponential, Again","url":"https://www.julian.ac/blog/2025/09/27/failing-to-understand-the-exponential-again/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"ndr","user_is_author":false,"tags":["ai"],"short_id_url":"https://lobste.rs/s/boxrhr","comments_url":"https://lobste.rs/s/boxrhr/failing_understand_exponential_again"},{"short_id":"apzcvg","created_at":"2025-09-28T10:41:23.000-05:00","title":"scm2wasm: A Scheme to WASM compiler in 600 lines of C, making use of WASM GC","url":"https://git.lain.faith/iitalics/scm2wasm","score":23,"flags":0,"comment_count":5,"description":"","description_plain":"","submitter_user":"untitaker","user_is_author":false,"tags":["lisp","wasm"],"short_id_url":"https://lobste.rs/s/apzcvg","comments_url":"https://lobste.rs/s/apzcvg/scm2wasm_scheme_wasm_compiler_600_lines_c"},{"short_id":"g9z6o4","created_at":"2025-09-28T10:22:55.000-05:00","title":"The death of utilitarian programming","url":"","score":6,"flags":1,"comment_count":7,"description":"\u003cp\u003eUtilitarian coding is defined as follows: \u003cem\u003eThe code you write should be \u003cstrong\u003edirectly\u003c/strong\u003e useful or serve the interest of at least one actual human being.\u003c/em\u003e It might appear somewhat abstract or vague, so examples might help. For example, I don’t consider \u003cem\u003eframeworks\u003c/em\u003e as utilitarian code. What you create are like the “frames” of a picture box, someone else (the user) will take it and draw the actual picture. Though you did help with part of the process, it’s indirect at best. You’re part of the supply chain here, not part of the team.\u003c/p\u003e\n\u003cp\u003eA clever and witty bash script running on a unix server somewhere is also not utilitarian coding, no human ever directly benefited from it.\u003c/p\u003e\n\u003cp\u003eLibraries can be somewhat utilitarian, at least more than frameworks. At least they provide some reusable functionality to the user out of the box like logging, scanning a barcode, fetching data from a URL, etc. But again, a lot of indirection and little lasting time, what did \u003cstrong\u003eyou\u003c/strong\u003e learn about implementation and life in that process my friend?\u003c/p\u003e\n\u003cp\u003eIt’s my strong belief that our life’s purpose isn’t just about learning technology but also other non-technical things in life (such as life itself). By compartmentalizing themselves into libraries, frameworks, specifications, package managers, build and tooling, etc, many coders over the last decade have sort of divorced themselves from the intricacies and interaction with life itself.\u003c/p\u003e\n\u003cp\u003eA decade ago from now (i.e. circa 2014-15) is where I’d say utilitarian coding came to an end. The kind of programming that prevailed until then (mostly desktop programming) was highly utilitarian in nature. You used to develop a Winforms App for the client, with actual textboxes, dropdowns and buttons, tailored to their specific requirements and domain knowledge, what could be more utilitarian than that! You used to gain domain expertise and not just technology expertise.\u003c/p\u003e\n\u003cp\u003eAs things started moving to the cloud, the interaction between the end-user and programmer became less and less, that’s when utilitarian coding started dying too. As a new breed of specialists called “Agile Experts”, “Scrum Masters”, “Tech Advocates”, “Thought Leaders”, etc. started inserting themselves between the coder and end user, the former’s role started morphing as the ostrich policy of dealing only with technology and nothing else. We started losing touch with domain expertise, and became branded as “python coder”, “PHP scripter”, “web developer”, “AI developer”, etc. That’s how folks started churning out more frameworks, libraries, packages, stencils, helper scripts, etc. instead of worrying about actual problem solving with the stakeholders.\u003c/p\u003e\n\u003cp\u003eThis is how things stand right now for the most part, desktop development and other forms of utilitarian coding have still maintained their small niche somewhere, but they’re just a niche. But it’s not a healthy development, nor is it sustainable long term. I strongly feel that this bubble is waiting to burst one day soon, and there will be a reversion towards utilitarian coding again. Even the cloud itself needs to be more utilitarian, a lot of needless clutter out there which can be simplified.\u003c/p\u003e\n\u003cp\u003eWhat do you think? Let me know in comments.\u003c/p\u003e\n","description_plain":"Utilitarian coding is defined as follows: *The code you write should be **directly** useful or serve the interest of at least one actual human being.* It might appear somewhat abstract or vague, so examples might help. For example, I don't consider *frameworks* as utilitarian code. What you create are like the \"frames\" of a picture box, someone else (the user) will take it and draw the actual picture. Though you did help with part of the process, it's indirect at best. You're part of the supply chain here, not part of the team.\r\n\r\nA clever and witty bash script running on a unix server somewhere is also not utilitarian coding, no human ever directly benefited from it.\r\n\r\nLibraries can be somewhat utilitarian, at least more than frameworks. At least they provide some reusable functionality to the user out of the box like logging, scanning a barcode, fetching data from a URL, etc. But again, a lot of indirection and little lasting time, what did **you** learn about implementation and life in that process my friend?\r\n\r\nIt's my strong belief that our life's purpose isn't just about learning technology but also other non-technical things in life (such as life itself). By compartmentalizing themselves into libraries, frameworks, specifications, package managers, build and tooling, etc, many coders over the last decade have sort of divorced themselves from the intricacies and interaction with life itself.\r\n\r\nA decade ago from now (i.e. circa 2014-15) is where I'd say utilitarian coding came to an end. The kind of programming that prevailed until then (mostly desktop programming) was highly utilitarian in nature. You used to develop a Winforms App for the client, with actual textboxes, dropdowns and buttons, tailored to their specific requirements and domain knowledge, what could be more utilitarian than that! You used to gain domain expertise and not just technology expertise.\r\n\r\nAs things started moving to the cloud, the interaction between the end-user and programmer became less and less, that's when utilitarian coding started dying too. As a new breed of specialists called \"Agile Experts\", \"Scrum Masters\", \"Tech Advocates\", \"Thought Leaders\", etc. started inserting themselves between the coder and end user, the former's role started morphing as the ostrich policy of dealing only with technology and nothing else. We started losing touch with domain expertise, and became branded as \"python coder\", \"PHP scripter\", \"web developer\", \"AI developer\", etc. That's how folks started churning out more frameworks, libraries, packages, stencils, helper scripts, etc. instead of worrying about actual problem solving with the stakeholders.\r\n\r\nThis is how things stand right now for the most part, desktop development and other forms of utilitarian coding have still maintained their small niche somewhere, but they're just a niche. But it's not a healthy development, nor is it sustainable long term. I strongly feel that this bubble is waiting to burst one day soon, and there will be a reversion towards utilitarian coding again. Even the cloud itself needs to be more utilitarian, a lot of needless clutter out there which can be simplified.\r\n\r\nWhat do you think? Let me know in comments.","submitter_user":"pyeri","user_is_author":true,"tags":["programming"],"short_id_url":"https://lobste.rs/s/g9z6o4","comments_url":"https://lobste.rs/s/g9z6o4/death_utilitarian_programming"},{"short_id":"1e9wix","created_at":"2025-09-28T09:58:23.000-05:00","title":"The golden ratio as a number base","url":"https://apieceofthepi.substack.com/p/the-golden-ratio-as-a-number-base","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"abhi9u","user_is_author":false,"tags":["math"],"short_id_url":"https://lobste.rs/s/1e9wix","comments_url":"https://lobste.rs/s/1e9wix/golden_ratio_as_number_base"},{"short_id":"nqllvf","created_at":"2025-09-28T08:27:10.000-05:00","title":"When I say \"alphabetical order\", I mean \"alphabetical order\"","url":"https://sebastiano.tronto.net/blog/2025-09-28-alphabetic-order/","score":12,"flags":1,"comment_count":9,"description":"","description_plain":"","submitter_user":"knl","user_is_author":false,"tags":["design","rant"],"short_id_url":"https://lobste.rs/s/nqllvf","comments_url":"https://lobste.rs/s/nqllvf/when_i_say_alphabetical_order_i_mean"},{"short_id":"9islkn","created_at":"2025-09-28T07:57:57.000-05:00","title":"Detaching GraalVM from the Java Ecosystem Train","url":"https://blogs.oracle.com/java/post/detaching-graalvm-from-the-java-ecosystem-train","score":12,"flags":0,"comment_count":5,"description":"","description_plain":"","submitter_user":"ahelwer","user_is_author":false,"tags":["java"],"short_id_url":"https://lobste.rs/s/9islkn","comments_url":"https://lobste.rs/s/9islkn/detaching_graalvm_from_java_ecosystem"}]