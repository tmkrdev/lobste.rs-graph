[{"short_id":"ccj5nt","created_at":"2025-10-15T12:09:56.000-05:00","title":"Porting from Perl to Go: Simplifying for Platform Engineering","url":"https://phoenixtrap.com/2025/10/05/brew-patch-upgrade-go-port/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"mjgardner","user_is_author":true,"tags":["devops","go","linux","mac","perl"],"short_id_url":"https://lobste.rs/s/ccj5nt","comments_url":"https://lobste.rs/s/ccj5nt/porting_from_perl_go_simplifying_for"},{"short_id":"kzswud","created_at":"2025-10-15T11:41:09.000-05:00","title":"zpoline: a system call hook mechanism based on binary rewriting (2023)","url":"https://www.usenix.org/conference/atc23/presentation/yasukata","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"lcapaldo","user_is_author":false,"tags":["debugging","unix"],"short_id_url":"https://lobste.rs/s/kzswud","comments_url":"https://lobste.rs/s/kzswud/zpoline_system_call_hook_mechanism_based"},{"short_id":"gr5x47","created_at":"2025-10-15T11:15:28.000-05:00","title":"Cal.com's Open Source UI Library","url":"https://coss.com/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"WA9ACE","user_is_author":false,"tags":["css"],"short_id_url":"https://lobste.rs/s/gr5x47","comments_url":"https://lobste.rs/s/gr5x47/cal_com_s_open_source_ui_library"},{"short_id":"gmjcf0","created_at":"2025-10-15T10:41:58.000-05:00","title":"Pwning the Entire Nix Ecosystem","url":"https://ptrpa.ws/nixpkgs-actions-abuse","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"knl","user_is_author":false,"tags":["nix","security"],"short_id_url":"https://lobste.rs/s/gmjcf0","comments_url":"https://lobste.rs/s/gmjcf0/pwning_entire_nix_ecosystem"},{"short_id":"teve66","created_at":"2025-10-15T10:33:54.000-05:00","title":"Unfair Flips World Record Strategy","url":"https://graham.build/s/a-blog/028-unfair-flips-world-record-strategy/","score":5,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"kzdnk","user_is_author":false,"tags":["games","math"],"short_id_url":"https://lobste.rs/s/teve66","comments_url":"https://lobste.rs/s/teve66/unfair_flips_world_record_strategy"},{"short_id":"v96g77","created_at":"2025-10-15T09:52:20.000-05:00","title":"Why C variable argument functions are an abomination (and what to do about it)","url":"https://h4x0r.org/vargs/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"viega","user_is_author":true,"tags":["c"],"short_id_url":"https://lobste.rs/s/v96g77","comments_url":"https://lobste.rs/s/v96g77/why_c_variable_argument_functions_are"},{"short_id":"ytv7mi","created_at":"2025-10-15T09:43:15.000-05:00","title":"Recreating the Canon Cat document interface","url":"https://lab.alexanderobenauer.com/updates/the-jasper-report","score":6,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"tonyg","user_is_author":false,"tags":["editors","osdev","retrocomputing"],"short_id_url":"https://lobste.rs/s/ytv7mi","comments_url":"https://lobste.rs/s/ytv7mi/recreating_canon_cat_document_interface"},{"short_id":"eets29","created_at":"2025-10-15T09:13:21.000-05:00","title":"Understanding Spec-Driven-Development: Kiro, Spec-Kit, and Tessl","url":"https://martinfowler.com/articles/exploring-gen-ai/sdd-3-tools.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"popey","user_is_author":false,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/eets29","comments_url":"https://lobste.rs/s/eets29/understanding_spec_driven_development"},{"short_id":"j4v4db","created_at":"2025-10-15T08:00:40.000-05:00","title":"Testing Frozen String Literals in Production","url":"https://intertwingly.net/blog/2025/10/15/Frozen-String-Literals.html","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"pushcx","user_is_author":false,"tags":["performance","ruby"],"short_id_url":"https://lobste.rs/s/j4v4db","comments_url":"https://lobste.rs/s/j4v4db/testing_frozen_string_literals"},{"short_id":"1kweb2","created_at":"2025-10-15T07:50:12.000-05:00","title":"Reverse Engineering iWork","url":"https://andrews.substack.com/p/reverse-engineering-iwork","score":14,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"andrewmd5","user_is_author":true,"tags":["ios","mac","reversing"],"short_id_url":"https://lobste.rs/s/1kweb2","comments_url":"https://lobste.rs/s/1kweb2/reverse_engineering_iwork"},{"short_id":"w3yzd2","created_at":"2025-10-15T07:07:35.000-05:00","title":"Garbage Collection for Rust: The Finalizer Frontier","url":"https://soft-dev.org/pubs/html/hughes_tratt__garbage_collection_for_rust_the_finalizer_frontier/","score":15,"flags":0,"comment_count":3,"description":"","description_plain":"","submitter_user":"ltratt","user_is_author":true,"tags":["compilers","rust"],"short_id_url":"https://lobste.rs/s/w3yzd2","comments_url":"https://lobste.rs/s/w3yzd2/garbage_collection_for_rust_finalizer"},{"short_id":"twvpz9","created_at":"2025-10-15T07:00:06.000-05:00","title":"OSM Perfect Intersection Editor","url":"https://www.openstreetmap.org/user/Mikhail%20Kuzin/diary/407577","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"fanf","user_is_author":false,"tags":["release"],"short_id_url":"https://lobste.rs/s/twvpz9","comments_url":"https://lobste.rs/s/twvpz9/osm_perfect_intersection_editor"},{"short_id":"8okzkd","created_at":"2025-10-15T06:11:58.000-05:00","title":"How AI Hears Accents","url":"https://accent-explorer.boldvoice.com/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"indigo","user_is_author":false,"tags":["ai"],"short_id_url":"https://lobste.rs/s/8okzkd","comments_url":"https://lobste.rs/s/8okzkd/how_ai_hears_accents"},{"short_id":"zqiy8l","created_at":"2025-10-15T05:53:13.000-05:00","title":"Why export templates would be useful in C++ (2010)","url":"http://warp.povusers.org/programming/export_templates.html","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"calvin","user_is_author":false,"tags":["c++"],"short_id_url":"https://lobste.rs/s/zqiy8l","comments_url":"https://lobste.rs/s/zqiy8l/why_export_templates_would_be_useful_c"},{"short_id":"gbp005","created_at":"2025-10-15T04:34:29.000-05:00","title":"When you opened a screen shot of a video in Paint, the video was playing in it","url":"https://devblogs.microsoft.com/oldnewthing/20251014-00/?p=111681","score":42,"flags":0,"comment_count":4,"description":"","description_plain":"","submitter_user":"abareplace","user_is_author":false,"tags":["graphics","windows"],"short_id_url":"https://lobste.rs/s/gbp005","comments_url":"https://lobste.rs/s/gbp005/when_you_opened_screen_shot_video_paint"},{"short_id":"xiewju","created_at":"2025-10-15T04:22:40.000-05:00","title":"GrapheneOS could break Pixel exclusivity in 2026 with major OEM deal","url":"https://piunikaweb.com/2025/10/13/grapheneos-ending-pixel-exclusivity-new-oem/","score":3,"flags":1,"comment_count":0,"description":"","description_plain":"","submitter_user":"lonami","user_is_author":false,"tags":["android","privacy"],"short_id_url":"https://lobste.rs/s/xiewju","comments_url":"https://lobste.rs/s/xiewju/grapheneos_could_break_pixel"},{"short_id":"wo7s6i","created_at":"2025-10-15T03:36:25.000-05:00","title":"Artisanal shims for the bitter lesson age","url":"https://blog.nilenso.com/blog/2025/10/14/bitter-lesson-applied-ai/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"atharva","user_is_author":true,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/wo7s6i","comments_url":"https://lobste.rs/s/wo7s6i/artisanal_shims_for_bitter_lesson_age"},{"short_id":"8bx2xx","created_at":"2025-10-15T02:01:43.000-05:00","title":"PS/2 Mouse Interfacing","url":"https://isdaman.com/alsos/hardware/mouse/ps2interface.htm","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"venam","user_is_author":false,"tags":["hardware"],"short_id_url":"https://lobste.rs/s/8bx2xx","comments_url":"https://lobste.rs/s/8bx2xx/ps_2_mouse_interfacing"},{"short_id":"0midxc","created_at":"2025-10-15T01:33:18.000-05:00","title":"API design principle: Don't tempt people to divide by zero","url":"https://devblogs.microsoft.com/oldnewthing/20251013-00/?p=111677","score":10,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"LesleyLai","user_is_author":false,"tags":["api","c++"],"short_id_url":"https://lobste.rs/s/0midxc","comments_url":"https://lobste.rs/s/0midxc/api_design_principle_don_t_tempt_people"},{"short_id":"yzsv13","created_at":"2025-10-15T00:16:10.000-05:00","title":"I am a programmer, not a rubber-stamp that approves Copilot generated code","url":"https://prahladyeri.github.io/blog/2025/10/i-am-a-programmer.html","score":38,"flags":0,"comment_count":13,"description":"","description_plain":"","submitter_user":"pyeri","user_is_author":true,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/yzsv13","comments_url":"https://lobste.rs/s/yzsv13/i_am_programmer_not_rubber_stamp_approves"},{"short_id":"f54axa","created_at":"2025-10-15T00:13:06.000-05:00","title":"Top-down Microarchitecture Analysis Method","url":"https://www.intel.com/content/www/us/en/docs/vtune-profiler/cookbook/2025-4/top-down-microarchitecture-analysis-method.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"gnyeki","user_is_author":false,"tags":["hardware","performance"],"short_id_url":"https://lobste.rs/s/f54axa","comments_url":"https://lobste.rs/s/f54axa/top_down_microarchitecture_analysis"},{"short_id":"g0oxmh","created_at":"2025-10-14T23:52:22.000-05:00","title":"FSF announces Librephone project","url":"https://www.fsf.org/news/librephone-project","score":35,"flags":0,"comment_count":9,"description":"","description_plain":"","submitter_user":"sjamaan","user_is_author":false,"tags":["android","mobile"],"short_id_url":"https://lobste.rs/s/g0oxmh","comments_url":"https://lobste.rs/s/g0oxmh/fsf_announces_librephone_project"},{"short_id":"jgsgad","created_at":"2025-10-14T23:34:56.000-05:00","title":"How to Have Productive Conversations About AI","url":"https://zed.dev/blog/reconsidering-ai-steve-klabnik","score":1,"flags":1,"comment_count":0,"description":"","description_plain":"","submitter_user":"gulbanana","user_is_author":false,"tags":["practices","vibecoding"],"short_id_url":"https://lobste.rs/s/jgsgad","comments_url":"https://lobste.rs/s/jgsgad/how_have_productive_conversations_about"},{"short_id":"dnf353","created_at":"2025-10-14T21:20:00.000-05:00","title":"From Linearity to Borrowing","url":"https://dl.acm.org/doi/abs/10.1145/3764117","score":14,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"fanf","user_is_author":false,"tags":["pdf","plt"],"short_id_url":"https://lobste.rs/s/dnf353","comments_url":"https://lobste.rs/s/dnf353/from_linearity_borrowing"},{"short_id":"zmysvd","created_at":"2025-10-14T21:13:58.000-05:00","title":"Old is Gold: Optimizing Single-threaded Applications with Exgen-Malloc","url":"https://arxiv.org/pdf/2510.10219","score":3,"flags":0,"comment_count":1,"description":"\u003cp\u003eAbstract:\nMemory allocators hide beneath nearly every application stack, yet their performance footprint extends far beyond their code size. Even small inefficiencies in the allocators ripple through caches and the rest of the memory hierarchy, collectively imposing what operators often call a \"datacenter tax\". At hyperscale, even a 1% improvement in allocator efficiency can unlock millions of dollars in savings and measurable reductions in datacenter energy consumption. Modern memory allocators are designed to optimize allocation speed and memory fragmentation in multi-threaded environments, relying on complex metadata and control logic to achieve high performance. However, the overhead introduced by this complexity prompts a reevaluation of allocator design. Notably, such overhead can be avoided in single-threaded scenarios, which continue to be widely used across diverse application domains.\u003c/p\u003e\n\u003cp\u003eIn this paper, we introduce Exgen-Malloc, a memory allocator purpose-built for single-threaded applications. By specializing for single-threaded execution, Exgen-Malloc eliminates unnecessary metadata, simplifies the control flow, thereby reducing overhead and improving allocation efficiency. Its core design features include a centralized heap, a single free-block list, and a balanced strategy for memory commitment and relocation. Additionally, Exgen-Malloc incorporates design principles in modern multi-threaded allocators, which do not exist in legacy single-threaded allocators such as dlmalloc. We evaluate Exgen-Malloc on two Intel Xeon platforms. Across both systems, Exgen-Malloc achieves a speedup of 1.17x, 1.10x, and 1.93x over dlmalloc on SPEC CPU2017, redis-benchmark, and mimalloc-bench, respectively. In addition to performance, Exgen-Malloc achieves 6.2%, 0.1%, and 25.2% memory savings over mimalloc on SPEC CPU2017, redis-benchmark, and mimalloc-bench, respectively.\u003c/p\u003e\n","description_plain":"Abstract:\r\nMemory allocators hide beneath nearly every application stack, yet their performance footprint extends far beyond their code size. Even small inefficiencies in the allocators ripple through caches and the rest of the memory hierarchy, collectively imposing what operators often call a \"datacenter tax\". At hyperscale, even a 1% improvement in allocator efficiency can unlock millions of dollars in savings and measurable reductions in datacenter energy consumption. Modern memory allocators are designed to optimize allocation speed and memory fragmentation in multi-threaded environments, relying on complex metadata and control logic to achieve high performance. However, the overhead introduced by this complexity prompts a reevaluation of allocator design. Notably, such overhead can be avoided in single-threaded scenarios, which continue to be widely used across diverse application domains.\r\n\r\nIn this paper, we introduce Exgen-Malloc, a memory allocator purpose-built for single-threaded applications. By specializing for single-threaded execution, Exgen-Malloc eliminates unnecessary metadata, simplifies the control flow, thereby reducing overhead and improving allocation efficiency. Its core design features include a centralized heap, a single free-block list, and a balanced strategy for memory commitment and relocation. Additionally, Exgen-Malloc incorporates design principles in modern multi-threaded allocators, which do not exist in legacy single-threaded allocators such as dlmalloc. We evaluate Exgen-Malloc on two Intel Xeon platforms. Across both systems, Exgen-Malloc achieves a speedup of 1.17x, 1.10x, and 1.93x over dlmalloc on SPEC CPU2017, redis-benchmark, and mimalloc-bench, respectively. In addition to performance, Exgen-Malloc achieves 6.2%, 0.1%, and 25.2% memory savings over mimalloc on SPEC CPU2017, redis-benchmark, and mimalloc-bench, respectively.","submitter_user":"asb","user_is_author":false,"tags":["pdf","performance"],"short_id_url":"https://lobste.rs/s/zmysvd","comments_url":"https://lobste.rs/s/zmysvd/old_is_gold_optimizing_single_threaded"}]