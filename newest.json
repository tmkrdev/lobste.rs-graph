[{"short_id":"m8cbkw","short_id_url":"https://lobste.rs/s/m8cbkw","created_at":"2025-03-14T05:55:25.000-05:00","title":"It’s Not As Simple As “Use A Memory Safe Language\" - YouTube","url":"https://www.youtube.com/watch?v=iQ-eTaW6-cM","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m8cbkw/it_s_not_as_simple_as_use_memory_safe","submitter_user":"olegkovalov","user_is_author":false,"tags":["rust","video"]},{"short_id":"l4tc7w","short_id_url":"https://lobste.rs/s/l4tc7w","created_at":"2025-03-14T05:27:58.000-05:00","title":"What are you doing this weekend?","url":"","score":1,"flags":0,"comment_count":0,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it’s more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it’s more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/l4tc7w/what_are_you_doing_this_weekend","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"emajqr","short_id_url":"https://lobste.rs/s/emajqr","created_at":"2025-03-14T05:22:09.000-05:00","title":"Enhancing CA Practices: Key Updates in Mozilla Root Store Policy, v3.0","url":"https://blog.mozilla.org/security/2025/03/12/enhancing-ca-practices-key-updates-in-mozilla-root-store-policy-v3-0/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/emajqr/enhancing_ca_practices_key_updates","submitter_user":"freddyb","user_is_author":false,"tags":["browsers","cryptography","security"]},{"short_id":"ix1yqo","short_id_url":"https://lobste.rs/s/ix1yqo","created_at":"2025-03-14T03:33:52.000-05:00","title":"i-cant-believe-its-not-webusb: Hacking around lack of WebUSB support in Firefox","url":"https://github.com/ArcaneNibble/i-cant-believe-its-not-webusb","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ix1yqo/i_cant_believe_its_not_webusb_hacking","submitter_user":"jeanthomas","user_is_author":false,"tags":["hardware","web"]},{"short_id":"lomwgf","short_id_url":"https://lobste.rs/s/lomwgf","created_at":"2025-03-14T03:32:49.000-05:00","title":"coq-of-rust: Formal verification tool for Rust","url":"https://github.com/formal-land/coq-of-rust","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lomwgf/coq_rust_formal_verification_tool_for","submitter_user":"jeanthomas","user_is_author":false,"tags":["formalmethods","rust"]},{"short_id":"ve6gyy","short_id_url":"https://lobste.rs/s/ve6gyy","created_at":"2025-03-14T02:09:00.000-05:00","title":"Recursion kills: The story behind CVE-2024-8176 / Expat 2.7.0 released, includes security fixes","url":"https://blog.hartwork.org/posts/expat-2-7-0-released/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ve6gyy/recursion_kills_story_behind_cve_2024","submitter_user":"hanno","user_is_author":false,"tags":["c","programming","security"]},{"short_id":"m1ngf0","short_id_url":"https://lobste.rs/s/m1ngf0","created_at":"2025-03-14T00:25:45.000-05:00","title":"Memory Corruption in Delphi","url":"https://blog.includesecurity.com/2025/03/memory-corruption-in-delphi/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m1ngf0/memory_corruption_delphi","submitter_user":"freddyb","user_is_author":false,"tags":["security"]},{"short_id":"3l1xef","short_id_url":"https://lobste.rs/s/3l1xef","created_at":"2025-03-13T18:48:54.000-05:00","title":"Functional Tests As A Tree Of Continuations (2010)","url":"https://www.evanmiller.org/functional-tests-as-a-tree-of-continuations.html","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3l1xef/functional_tests_as_tree_continuations","submitter_user":"vrthra","user_is_author":false,"tags":["testing"]},{"short_id":"lkdgd4","short_id_url":"https://lobste.rs/s/lkdgd4","created_at":"2025-03-13T18:30:12.000-05:00","title":"Typestate Programming","url":"https://docs.rust-embedded.org/book/static-guarantees/typestate-programming.html","score":3,"flags":1,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lkdgd4/typestate_programming","submitter_user":"kaycebasques","user_is_author":false,"tags":["formalmethods","hardware","plt","rust"]},{"short_id":"ozgd5s","short_id_url":"https://lobste.rs/s/ozgd5s","created_at":"2025-03-13T17:58:42.000-05:00","title":"Can we communally deprecate git checkout?","url":"https://mirawelner.com/posts/checkout.html","score":32,"flags":0,"comment_count":35,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ozgd5s/can_we_communally_deprecate_git_checkout","submitter_user":"MiraWelner","user_is_author":true,"tags":["rant","vcs"]},{"short_id":"lni15k","short_id_url":"https://lobste.rs/s/lni15k","created_at":"2025-03-13T17:36:40.000-05:00","title":"What Programming Concepts do you Struggle to Grok or Use in Production?","url":"","score":9,"flags":0,"comment_count":7,"description":"\u003cp\u003eFor me, type magic whether Haskelly or Idrisy dependent types evades me. A lot of modern comp sci concentrates on types, which I find a slog to get through, in spite of some \u003ca href=\"https://lobste.rs/s/11k4ri/how_should_i_read_type_system_notation\" rel=\"ugc\"\u003ehelps\u003c/a\u003e. I’ve worked through a few books on the topic and admire how Rust renders some errors unnecessary or how types handle some types of control flow, but in practice I only use them to optimize performance in Lisps and give compiler warnings and don’t see the value of modeling my own problems/domains with them.\u003c/p\u003e\n\u003cp\u003eI’ve also long struggled to appreciate why/when you’d opt for \u003ca href=\"https://lobste.rs/s/yyju3z/when_is_oop_more_useful_modelling\" rel=\"ugc\"\u003eOOP\u003c/a\u003e outside of GUIs.\u003c/p\u003e\n\u003cp\u003eI never understood the use of NoSQL nor ORMs (although opinion’s now against them) and embrace relational algebra through Datalog and Prolog.\u003c/p\u003e\n\u003cp\u003eFor about a year, I thought supply chain attacks were mostly just popular paranoia due to a recent case which was caught instantly, but I saw the light through preventative measures like vendoring which offer stability from other threats too.\u003c/p\u003e\n\u003cp\u003eI don’t understand the purpose of a fair few functions in the Go std lib e.g. the presence of both the \u003ccode\u003eTrimLeft\u003c/code\u003e and \u003ccode\u003eCutPrefix\u003c/code\u003e families vs. e.g. the Split family. It just seems inconsistent and strange to have so many in the normal string API which are easily implemented out of the same base operations in the few cases where necessary.\u003c/p\u003e\n","description_plain":"For me, type magic whether Haskelly or Idrisy dependent types evades me. A lot of modern comp sci concentrates on types, which I find a slog to get through, in spite of some [helps](https://lobste.rs/s/11k4ri/how_should_i_read_type_system_notation). I've worked through a few books on the topic and admire how Rust renders some errors unnecessary or how types handle some types of control flow, but in practice I only use them to optimize performance in Lisps and give compiler warnings and don't see the value of modeling my own problems/domains with them.\r\n\r\nI've also long struggled to appreciate why/when you'd opt for [OOP](https://lobste.rs/s/yyju3z/when_is_oop_more_useful_modelling) outside of GUIs.\r\n\r\nI never understood the use of NoSQL nor ORMs (although opinion's now against them) and embrace relational algebra through Datalog and Prolog.\r\n\r\nFor about a year, I thought supply chain attacks were mostly just popular paranoia due to a recent case which was caught instantly, but I saw the light through preventative measures like vendoring which offer stability from other threats too.\r\n\r\nI don't understand the purpose of a fair few functions in the Go std lib e.g. the presence of both the `TrimLeft` and `CutPrefix` families vs. e.g. the Split family. It just seems inconsistent and strange to have so many in the normal string API which are easily implemented out of the same base operations in the few cases where necessary.","comments_url":"https://lobste.rs/s/lni15k/what_programming_concepts_do_you","submitter_user":"veqq","user_is_author":true,"tags":["ask","compsci","programming"]},{"short_id":"ubwuzz","short_id_url":"https://lobste.rs/s/ubwuzz","created_at":"2025-03-13T16:54:54.000-05:00","title":"High-performance computing, with much less code","url":"https://news.mit.edu/2025/high-performance-computing-with-much-less-code-0313","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ubwuzz/high_performance_computing_with_much","submitter_user":"iamwil","user_is_author":false,"tags":["programming"]},{"short_id":"t2bmsy","short_id_url":"https://lobste.rs/s/t2bmsy","created_at":"2025-03-13T16:49:42.000-05:00","title":"fsync() after open() is an elaborate no-op","url":"https://despairlabs.com/blog/posts/2025-03-13-fsync-after-open-is-an-elaborate-no-op/","score":7,"flags":0,"comment_count":15,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/t2bmsy/fsync_after_open_is_elaborate_no_op","submitter_user":"janerik","user_is_author":false,"tags":["databases"]},{"short_id":"p4xdsv","short_id_url":"https://lobste.rs/s/p4xdsv","created_at":"2025-03-13T15:06:14.000-05:00","title":"IO devices and latency","url":"https://planetscale.com/blog/io-devices-and-latency","score":9,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/p4xdsv/io_devices_latency","submitter_user":"fanf","user_is_author":false,"tags":["performance","visualization"]},{"short_id":"mzbcpk","short_id_url":"https://lobste.rs/s/mzbcpk","created_at":"2025-03-13T13:31:07.000-05:00","title":"Xata Agent: AI agent expert in PostgreSQL","url":"https://github.com/xataio/agent","score":4,"flags":1,"comment_count":7,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mzbcpk/xata_agent_ai_agent_expert_postgresql","submitter_user":"tsg","user_is_author":true,"tags":["ai","databases"]},{"short_id":"gvgmth","short_id_url":"https://lobste.rs/s/gvgmth","created_at":"2025-03-13T12:14:48.000-05:00","title":"Choosing Languages","url":"https://steveklabnik.com/writing/choosing-languages/","score":94,"flags":1,"comment_count":95,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gvgmth/choosing_languages","submitter_user":"cadey","user_is_author":false,"tags":["culture","programming"]},{"short_id":"nyzi57","short_id_url":"https://lobste.rs/s/nyzi57","created_at":"2025-03-13T12:11:24.000-05:00","title":"Let the stagger experiments begin","url":"https://nerdy.dev/sibling-index","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/nyzi57/let_stagger_experiments_begin","submitter_user":"MatheusRich","user_is_author":false,"tags":["css"]},{"short_id":"odzx0k","short_id_url":"https://lobste.rs/s/odzx0k","created_at":"2025-03-13T11:54:12.000-05:00","title":"Curry: A Truly Integrated Functional Logic Programming Language","url":"https://curry-lang.org","score":19,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/odzx0k/curry_truly_integrated_functional_logic","submitter_user":"4ad","user_is_author":false,"tags":["haskell","plt"]},{"short_id":"dakizz","short_id_url":"https://lobste.rs/s/dakizz","created_at":"2025-03-13T10:40:10.000-05:00","title":"It's not cheating if you write the video game solver yourself","url":"https://robertheaton.com/cocoon/","score":13,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dakizz/it_s_not_cheating_if_you_write_video_game","submitter_user":"hwayne","user_is_author":false,"tags":["compsci","games"]},{"short_id":"atvfzs","short_id_url":"https://lobste.rs/s/atvfzs","created_at":"2025-03-13T10:11:31.000-05:00","title":"Stumbling our way into Solving the World's Oldest Board Game","url":"https://royalur.net/blog/solved","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/atvfzs/stumbling_our_way_into_solving_world_s","submitter_user":"GabLeRoux","user_is_author":false,"tags":["ai","games","historical","visualization"]},{"short_id":"fpoyhd","short_id_url":"https://lobste.rs/s/fpoyhd","created_at":"2025-03-13T09:33:36.000-05:00","title":"How to write a quine","url":"https://czterycztery.pl/slowo/quine-EN.html","score":8,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/fpoyhd/how_write_quine","submitter_user":"nathell","user_is_author":false,"tags":["programming"]},{"short_id":"vvcazf","short_id_url":"https://lobste.rs/s/vvcazf","created_at":"2025-03-13T08:40:48.000-05:00","title":"WebAssembly from the Ground Up – learn WASM by building a compiler","url":"","score":43,"flags":5,"comment_count":15,"description":"\u003cp\u003eHi!\u003c/p\u003e\n\u003cp\u003eWe (pdubroy \u0026amp; marianoguerra) just launched an online book called WebAssembly from the Ground Up. It’s an online book to learn Wasm by building a simple compiler in JavaScript.\u003c/p\u003e\n\u003cp\u003eThis is the book we wish we’d had 3 years ago. Unlike many WebAssembly resources that focus on use cases and tooling, we wanted a deep dive into how Wasm actually works.\u003c/p\u003e\n\u003cp\u003eWe focus on the core of WebAssembly: the module format and the instruction set. We think the low-level details — the “virtual ISA” — are the most interesting part, and we had the crazy idea that writing a compiler is the best way to learn it.\u003c/p\u003e\n\u003cp\u003eOver the course of the book, you’ll build up two things:\u003c/p\u003e\n\u003cp\u003e1: An “assembler library”, that can be used to produce WebAssembly modules. Here’s an example:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003econst mod = module([\n  typesec([functype([], [])]),\n  funcsec([typeidx(0)]),\n  exportsec([export_('main', exportdesc.func(0))]),\n  codesec([code(func([], [instr.end]))]),\n]);\nreturn Uint8Array.from(mod.flat(Infinity));\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003e2: A very simple compiler for a language called Wafer, which looks like this:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eextern func setPixel(x, y, r, g, b, a);\n\nfunc draw(width, height, t) {\n  let y = 0;\n  while y \u0026lt; height {\n    let x = 0;\n    while x \u0026lt; width {\n      let r = t;\n      let g = x;\n      let b = y;\n      let a = 255;\n      setPixel(x, y, r, g, b, a);\n      x := x + 1;\n    }\n    y := y + 1;\n  }\n  0\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eIn case you’re not a fan of JavaScript, we’ve already heard of readers who’ve worked through the book in F# and Haskell. :-D\u003c/p\u003e\n\u003cp\u003eYou can check out a sample here: \u003ca href=\"https://wasmgroundup.com/book/contents-sample/\" rel=\"ugc\"\u003ehttps://wasmgroundup.com/book/contents-sample/\u003c/a\u003e — we’d love to hear what you think! There’s also a 25% discount for Lobsters readers — just use the code LOBSTERS25 at checkout.\u003c/p\u003e\n","description_plain":"Hi!\r\n\r\nWe (pdubroy \u0026 marianoguerra) just launched an online book called WebAssembly from the Ground Up. It's an online book to learn Wasm by building a simple compiler in JavaScript.\r\n\r\nThis is the book we wish we'd had 3 years ago. Unlike many WebAssembly resources that focus on use cases and tooling, we wanted a deep dive into how Wasm actually works.\r\n\r\nWe focus on the core of WebAssembly: the module format and the instruction set. We think the low-level details — the \"virtual ISA\" — are the most interesting part, and we had the crazy idea that writing a compiler is the best way to learn it.\r\n\r\nOver the course of the book, you'll build up two things:\r\n\r\n1: An \"assembler library\", that can be used to produce WebAssembly modules. Here's an example:\r\n\r\n    const mod = module([\r\n      typesec([functype([], [])]),\r\n      funcsec([typeidx(0)]),\r\n      exportsec([export_('main', exportdesc.func(0))]),\r\n      codesec([code(func([], [instr.end]))]),\r\n    ]);\r\n    return Uint8Array.from(mod.flat(Infinity));\r\n\r\n2: A very simple compiler for a language called Wafer, which looks like this:\r\n\r\n    extern func setPixel(x, y, r, g, b, a);\r\n    \r\n    func draw(width, height, t) {\r\n      let y = 0;\r\n      while y \u003c height {\r\n        let x = 0;\r\n        while x \u003c width {\r\n          let r = t;\r\n          let g = x;\r\n          let b = y;\r\n          let a = 255;\r\n          setPixel(x, y, r, g, b, a);\r\n          x := x + 1;\r\n        }\r\n        y := y + 1;\r\n      }\r\n      0\r\n    }\r\n\r\nIn case you're not a fan of JavaScript, we've already heard of readers who've worked through the book in F# and Haskell. :-D\r\n\r\nYou can check out a sample here: https://wasmgroundup.com/book/contents-sample/ — we'd love to hear what you think! There's also a 25% discount for Lobsters readers — just use the code LOBSTERS25 at checkout.","comments_url":"https://lobste.rs/s/vvcazf/webassembly_from_ground_up_learn_wasm_by","submitter_user":"marianoguerra","user_is_author":true,"tags":["book","compilers","show","wasm"]},{"short_id":"vanuj2","short_id_url":"https://lobste.rs/s/vanuj2","created_at":"2025-03-13T08:37:10.000-05:00","title":"Smoke test your Django admin site","url":"https://jmduke.com/posts/post/django-admin-changelist-test/","score":6,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vanuj2/smoke_test_your_django_admin_site","submitter_user":"pushcx","user_is_author":false,"tags":["python","testing","web"]},{"short_id":"ow3d4j","short_id_url":"https://lobste.rs/s/ow3d4j","created_at":"2025-03-13T06:42:56.000-05:00","title":"Almquist shell (ash) variants","url":"https://www.in-ulm.de/~mascheck/various/ash/","score":15,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ow3d4j/almquist_shell_ash_variants","submitter_user":"fanf","user_is_author":false,"tags":["unix"]},{"short_id":"sd8mtf","short_id_url":"https://lobste.rs/s/sd8mtf","created_at":"2025-03-13T06:05:48.000-05:00","title":"Xit devlog - optional patches, force push, symlinks","url":"https://radarroark.github.io/xit/devlog-optional-patches.html","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/sd8mtf/xit_devlog_optional_patches_force_push","submitter_user":"miloignis","user_is_author":false,"tags":["vcs"]}]