[{"short_id":"a29mny","created_at":"2025-07-17T11:36:39.000-05:00","title":"Hackers exploit a blind spot by hiding malware inside DNS records","url":"https://arstechnica.com/security/2025/07/hackers-exploit-a-blind-spot-by-hiding-malware-inside-dns-records/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"skeptrune","user_is_author":false,"tags":["security"],"short_id_url":"https://lobste.rs/s/a29mny","comments_url":"https://lobste.rs/s/a29mny/hackers_exploit_blind_spot_by_hiding"},{"short_id":"tusjpx","created_at":"2025-07-17T11:30:32.000-05:00","title":"The Mercury Protocol","url":"https://raw.githubusercontent.com/floren/mercury/master/SPEC","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"jfloren","user_is_author":true,"tags":["networking","satire"],"short_id_url":"https://lobste.rs/s/tusjpx","comments_url":"https://lobste.rs/s/tusjpx/mercury_protocol"},{"short_id":"savjgl","created_at":"2025-07-17T11:08:57.000-05:00","title":"Firefox dev says Intel Raptor Lake crashes are increasing with rising temperatures in record European heat wave","url":"https://www.tomshardware.com/pc-components/cpus/firefox-dev-says-intel-raptor-lake-crashes-are-increasing-with-rising-temperatures-in-record-european-heat-wave-mozilla-staffs-tracking-overwhelmed-by-intel-crash-reports-team-disables-the-function","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"freddyb","user_is_author":false,"tags":["browsers","hardware"],"short_id_url":"https://lobste.rs/s/savjgl","comments_url":"https://lobste.rs/s/savjgl/firefox_dev_says_intel_raptor_lake"},{"short_id":"4oxkjl","created_at":"2025-07-17T11:01:51.000-05:00","title":"Python and Make in 2025","url":"https://onebadbit.com/posts/2025/07/python-and-make-in-2025/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"spookylukey","user_is_author":false,"tags":["python"],"short_id_url":"https://lobste.rs/s/4oxkjl","comments_url":"https://lobste.rs/s/4oxkjl/python_make_2025"},{"short_id":"nrt4sx","created_at":"2025-07-17T11:00:59.000-05:00","title":"IntelliJ IDEA Moves to the Unified Distribution","url":"https://blog.jetbrains.com/idea/2025/07/intellij-idea-unified-distribution-plan/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"cgrinds","user_is_author":false,"tags":["editors"],"short_id_url":"https://lobste.rs/s/nrt4sx","comments_url":"https://lobste.rs/s/nrt4sx/intellij_idea_moves_unified"},{"short_id":"czw9yx","created_at":"2025-07-17T10:42:57.000-05:00","title":"How I Became the First Linux User in India","url":"https://medium.com/@vishalmisra/how-i-became-the-first-linux-user-in-india-b86be9d2a6c5","score":5,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"rrampage","user_is_author":false,"tags":["historical","linux"],"short_id_url":"https://lobste.rs/s/czw9yx","comments_url":"https://lobste.rs/s/czw9yx/how_i_became_first_linux_user_india"},{"short_id":"lzvc21","created_at":"2025-07-17T10:19:15.000-05:00","title":"Why pull-based pipelines are faster","url":"https://blog.sequinstream.com/why-pull-based-pipelines-are-faster/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"acco","user_is_author":true,"tags":["databases","scaling"],"short_id_url":"https://lobste.rs/s/lzvc21","comments_url":"https://lobste.rs/s/lzvc21/why_pull_based_pipelines_are_faster"},{"short_id":"7hlkmf","created_at":"2025-07-17T09:59:37.000-05:00","title":"home-manager with Austin Horstman (khaneliman)","url":"https://fulltimenix.com/episodes/home-manager-with-austin-horstman-khaneliman","score":0,"flags":2,"comment_count":0,"description":"","description_plain":"","submitter_user":"mightyiam","user_is_author":true,"tags":["audio","nix"],"short_id_url":"https://lobste.rs/s/7hlkmf","comments_url":"https://lobste.rs/s/7hlkmf/home_manager_with_austin_horstman"},{"short_id":"udtfpn","created_at":"2025-07-17T09:58:56.000-05:00","title":"Zig's new Writer","url":"https://www.openmymind.net/Zigs-New-Writer/","score":11,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"carlana","user_is_author":false,"tags":["zig"],"short_id_url":"https://lobste.rs/s/udtfpn","comments_url":"https://lobste.rs/s/udtfpn/zig_s_new_writer"},{"short_id":"mklbl9","created_at":"2025-07-17T09:24:13.000-05:00","title":"lsr: ls but with io_uring","url":"https://tangled.sh/@rockorager.dev/lsr","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"op","user_is_author":false,"tags":["show","zig"],"short_id_url":"https://lobste.rs/s/mklbl9","comments_url":"https://lobste.rs/s/mklbl9/lsr_ls_with_io_uring"},{"short_id":"v2fuz3","created_at":"2025-07-17T09:21:19.000-05:00","title":"Asm Editor","url":"https://asm-editor.specy.app/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"lorddimwit","user_is_author":false,"tags":["assembly"],"short_id_url":"https://lobste.rs/s/v2fuz3","comments_url":"https://lobste.rs/s/v2fuz3/asm_editor"},{"short_id":"bodjms","created_at":"2025-07-17T08:52:45.000-05:00","title":"Game Development in Eight Bits (2021)","url":"https://www.youtube.com/watch?v=TPbroUDHG0s","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"blaix","user_is_author":false,"tags":["programming","video"],"short_id_url":"https://lobste.rs/s/bodjms","comments_url":"https://lobste.rs/s/bodjms/game_development_eight_bits_2021"},{"short_id":"b5frit","created_at":"2025-07-17T08:12:56.000-05:00","title":"Bundler v2.7: last release before Bundler 4","url":"https://bundler.io/blog/2025/07/17/bundler-v2-7.html","score":6,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"soulcutter","user_is_author":false,"tags":["release","ruby"],"short_id_url":"https://lobste.rs/s/b5frit","comments_url":"https://lobste.rs/s/b5frit/bundler_v2_7_last_release_before_bundler_4"},{"short_id":"7miuzf","created_at":"2025-07-17T07:55:24.000-05:00","title":"Terminal Trove - The $HOME of all things in the terminal","url":"https://terminaltrove.com/","score":8,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"voytec","user_is_author":false,"tags":["debugging","freebsd","linux","unix"],"short_id_url":"https://lobste.rs/s/7miuzf","comments_url":"https://lobste.rs/s/7miuzf/terminal_trove_home_all_things_terminal"},{"short_id":"vpzlcr","created_at":"2025-07-17T07:45:01.000-05:00","title":"Defeating Dependency Duplication in Tests?","url":"","score":4,"flags":0,"comment_count":5,"description":"\u003cp\u003eMany larger systems are organized as layers build up of individual components with dependencies. So, your main might look like\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003elet time = new Time(parameters);\nlet tracer = new Tracer(time, more_parameters);\nlet storage = new Storage(tracer, storage_parameters);\nlet network = new Network(time, tracer, other_parameters);\nlet the_main_thing = new TheMainThing(time, tracer, storage, network); \n\nthe_main_thing.run_event_loop();\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThis really works beautifully in main. However, when I want to write a test for, say, a storage layer, I have to duplicate time\u0026amp;tracer initialization, and, added up across all tests across all layers, there’s a lot of duplication. Although there’s really \u003cem\u003eone\u003c/em\u003e call to \u003ccode\u003enew Time\u003c/code\u003e I care about (the one in main), just mechanically looking for references would turn up way more occurrences in tests. Some of that can be avoided by having a per-layer test harness setup, but that still doesn’t entirely eliminate duplication (now it is per layer, rather than per test).\u003c/p\u003e\n\u003cp\u003eAre there some nice patterns to solve this problem, which don’t require buying the entire dynamic reflecty dependency-injection framework?\u003c/p\u003e\n","description_plain":"Many larger systems are organized as layers build up of individual components with dependencies. So, your main might look like\r\n\r\n```\r\nlet time = new Time(parameters);\r\nlet tracer = new Tracer(time, more_parameters);\r\nlet storage = new Storage(tracer, storage_parameters);\r\nlet network = new Network(time, tracer, other_parameters);\r\nlet the_main_thing = new TheMainThing(time, tracer, storage, network); \r\n\r\nthe_main_thing.run_event_loop();\r\n```\r\n\r\nThis really works beautifully in main. However, when I want to write a test for, say, a storage layer, I have to duplicate time\u0026tracer initialization, and, added up across all tests across all layers, there's a lot of duplication. Although there's really _one_ call to `new Time` I care about (the one in main), just mechanically looking for references would turn up way more occurrences in tests. Some of that can be avoided by having a per-layer test harness setup, but that still doesn't entirely eliminate duplication (now it is per layer, rather than per test). \r\n\r\nAre there some nice patterns to solve this problem, which don't require buying the entire dynamic reflecty dependency-injection framework?","submitter_user":"matklad","user_is_author":true,"tags":["ask","practices"],"short_id_url":"https://lobste.rs/s/vpzlcr","comments_url":"https://lobste.rs/s/vpzlcr/defeating_dependency_duplication_tests"},{"short_id":"ogq41h","created_at":"2025-07-17T07:26:20.000-05:00","title":"gccrs June 2025 monthly report","url":"https://rust-gcc.github.io/2025/07/17/2025-06-monthly-report.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"jmillikin","user_is_author":false,"tags":["compilers","rust"],"short_id_url":"https://lobste.rs/s/ogq41h","comments_url":"https://lobste.rs/s/ogq41h/gccrs_june_2025_monthly_report"},{"short_id":"fy2wcx","created_at":"2025-07-17T07:25:57.000-05:00","title":"We've got to stop sending files to each other","url":"https://shkspr.mobi/blog/2025/07/weve-got-to-stop-sending-files-to-each-other/","score":8,"flags":0,"comment_count":11,"description":"","description_plain":"","submitter_user":"scruss","user_is_author":false,"tags":["practices","rant"],"short_id_url":"https://lobste.rs/s/fy2wcx","comments_url":"https://lobste.rs/s/fy2wcx/we_ve_got_stop_sending_files_each_other"},{"short_id":"greve7","created_at":"2025-07-17T07:07:33.000-05:00","title":"Parsing Protobuf Like Never Before","url":"https://mcyoung.xyz/2025/07/16/hyperpb/","score":20,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"asb","user_is_author":false,"tags":["go","performance"],"short_id_url":"https://lobste.rs/s/greve7","comments_url":"https://lobste.rs/s/greve7/parsing_protobuf_like_never_before"},{"short_id":"cavtz6","created_at":"2025-07-17T07:00:04.000-05:00","title":"Firefox Security \u0026 Privacy newsletter 2025 Q2","url":"https://attackanddefense.dev/2025/07/17/firefox-security-privacy-newsletter-2025-q2.html","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"freddyb","user_is_author":true,"tags":["browsers","release","security"],"short_id_url":"https://lobste.rs/s/cavtz6","comments_url":"https://lobste.rs/s/cavtz6/firefox_security_privacy_newsletter"},{"short_id":"s92ylk","created_at":"2025-07-17T06:54:46.000-05:00","title":"Two Simple Rules to Fix Code Reviews","url":"https://serce.me/posts/2025-07-17-two-simple-rules-to-fix-code-reviews","score":15,"flags":0,"comment_count":11,"description":"","description_plain":"","submitter_user":"serce","user_is_author":true,"tags":["practices"],"short_id_url":"https://lobste.rs/s/s92ylk","comments_url":"https://lobste.rs/s/s92ylk/two_simple_rules_fix_code_reviews"},{"short_id":"zarobw","created_at":"2025-07-17T06:19:12.000-05:00","title":"Active-active Replication Extension for PostgreSQL by AWS","url":"https://github.com/aws/pgactive","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"zoranzaric","user_is_author":false,"tags":["databases"],"short_id_url":"https://lobste.rs/s/zarobw","comments_url":"https://lobste.rs/s/zarobw/active_active_replication_extension_for"},{"short_id":"wxsq3f","created_at":"2025-07-17T04:16:14.000-05:00","title":"C++ Trailing Return Types (2022)","url":"https://danielsieger.com/blog/2022/01/28/cpp-trailing-return-types.html","score":10,"flags":0,"comment_count":7,"description":"","description_plain":"","submitter_user":"susam","user_is_author":false,"tags":["c++"],"short_id_url":"https://lobste.rs/s/wxsq3f","comments_url":"https://lobste.rs/s/wxsq3f/c_trailing_return_types_2022"},{"short_id":"cuaicj","created_at":"2025-07-17T03:25:02.000-05:00","title":"Project SERVFAIL: one year in","url":"https://sdomi.pl/weblog/25-servfail-first-year/","score":15,"flags":0,"comment_count":3,"description":"","description_plain":"","submitter_user":"meithecatte","user_is_author":false,"tags":["networking"],"short_id_url":"https://lobste.rs/s/cuaicj","comments_url":"https://lobste.rs/s/cuaicj/project_servfail_one_year"},{"short_id":"zaeqvr","created_at":"2025-07-17T03:11:28.000-05:00","title":"I was wrong about robots.txt","url":"https://evgeniipendragon.com/posts/i-was-wrong-about-robots-txt/","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"eduard","user_is_author":false,"tags":["web"],"short_id_url":"https://lobste.rs/s/zaeqvr","comments_url":"https://lobste.rs/s/zaeqvr/i_was_wrong_about_robots_txt"},{"short_id":"iclgb7","created_at":"2025-07-17T02:24:11.000-05:00","title":"\"Bypassing\" specialization in Rust or How I Learned to Stop Worrying and Love Function Pointers","url":"https://oakchris1955.eu/posts/bypassing_specialization/","score":11,"flags":0,"comment_count":4,"description":"","description_plain":"","submitter_user":"asb","user_is_author":false,"tags":["rust"],"short_id_url":"https://lobste.rs/s/iclgb7","comments_url":"https://lobste.rs/s/iclgb7/bypassing_specialization_rust_how_i"}]