[{"short_id":"je72sf","created_at":"2025-10-06T11:16:03.000-05:00","title":"OpenZL: An Open Source Format-Aware Compression Framework","url":"https://engineering.fb.com/2025/10/06/developer-tools/openzl-open-source-format-aware-compression-framework/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"dayanruben","user_is_author":false,"tags":["c","c++","performance"],"short_id_url":"https://lobste.rs/s/je72sf","comments_url":"https://lobste.rs/s/je72sf/openzl_open_source_format_aware"},{"short_id":"9rn6ts","created_at":"2025-10-06T11:00:34.000-05:00","title":"A mere add_foreign_key can wipe out your whole Rails + SQLite production table","url":"https://kyrylo.org/software/2025/09/27/a-mere-add-foreign-key-can-wipe-out-your-whole-rails-sqlite-production-table.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"pushcx","user_is_author":false,"tags":["databases","ruby"],"short_id_url":"https://lobste.rs/s/9rn6ts","comments_url":"https://lobste.rs/s/9rn6ts/mere_add_foreign_key_can_wipe_out_your"},{"short_id":"uvxpo3","created_at":"2025-10-06T10:54:57.000-05:00","title":"Beating the L1 cache with value speculation (2021)","url":"https://mazzo.li/posts/value-speculation.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"daniel_alp","user_is_author":false,"tags":["assembly","c","performance"],"short_id_url":"https://lobste.rs/s/uvxpo3","comments_url":"https://lobste.rs/s/uvxpo3/beating_l1_cache_with_value_speculation"},{"short_id":"eqqb6h","created_at":"2025-10-06T10:39:35.000-05:00","title":"TinqerJS – LINQ Inspired ORM for TypeScript Supporting Postgres, SQLite","url":"https://tinqerjs.org/","score":1,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"jeswin","user_is_author":true,"tags":["javascript","nodejs"],"short_id_url":"https://lobste.rs/s/eqqb6h","comments_url":"https://lobste.rs/s/eqqb6h/tinqerjs_linq_inspired_orm_for"},{"short_id":"q79gay","created_at":"2025-10-06T10:30:43.000-05:00","title":"buffalo::buffalo::buffalo","url":"https://blog.ganets.ky/Buffalo/","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"signal-11","user_is_author":false,"tags":["c++","programming"],"short_id_url":"https://lobste.rs/s/q79gay","comments_url":"https://lobste.rs/s/q79gay/buffalo_buffalo_buffalo"},{"short_id":"5liwbw","created_at":"2025-10-06T10:15:51.000-05:00","title":"Why you should be using pathlib (2018)","url":"https://treyhunner.com/2018/12/why-you-should-be-using-pathlib/","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"hwayne","user_is_author":false,"tags":["python"],"short_id_url":"https://lobste.rs/s/5liwbw","comments_url":"https://lobste.rs/s/5liwbw/why_you_should_be_using_pathlib_2018"},{"short_id":"bu1a84","created_at":"2025-10-06T10:09:21.000-05:00","title":"I brain coded a static image gallery in a few hours","url":"https://domm.plix.at/perl/2025_10_braincoded_static_image_gallery.html","score":4,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"domm","user_is_author":true,"tags":["perl"],"short_id_url":"https://lobste.rs/s/bu1a84","comments_url":"https://lobste.rs/s/bu1a84/i_brain_coded_static_image_gallery_few"},{"short_id":"5ngjnk","created_at":"2025-10-06T09:45:31.000-05:00","title":"What are PolyForm licenses?","url":"https://polyformproject.org/what-is-polyform/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"pushcx","user_is_author":false,"tags":["law"],"short_id_url":"https://lobste.rs/s/5ngjnk","comments_url":"https://lobste.rs/s/5ngjnk/what_are_polyform_licenses"},{"short_id":"l1mq2a","created_at":"2025-10-06T09:33:48.000-05:00","title":"nfc-laboratory: NFC signal and protocol analyzer using SDR receiver","url":"https://github.com/josevcm/nfc-laboratory","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"jevinskie","user_is_author":false,"tags":["hardware"],"short_id_url":"https://lobste.rs/s/l1mq2a","comments_url":"https://lobste.rs/s/l1mq2a/nfc_laboratory_nfc_signal_protocol"},{"short_id":"a2ebrr","created_at":"2025-10-06T09:17:54.000-05:00","title":"nmail: Terminal-based email client for Linux and macOS","url":"https://github.com/d99kris/nmail","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"mccd","user_is_author":false,"tags":["email","linux","mac"],"short_id_url":"https://lobste.rs/s/a2ebrr","comments_url":"https://lobste.rs/s/a2ebrr/nmail_terminal_based_email_client_for"},{"short_id":"bgbpx0","created_at":"2025-10-06T08:53:56.000-05:00","title":"Introduction to AT Protocol","url":"https://mackuba.eu/2025/08/20/introduction-to-atproto/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"wofo","user_is_author":false,"tags":["api","distributed","programming"],"short_id_url":"https://lobste.rs/s/bgbpx0","comments_url":"https://lobste.rs/s/bgbpx0/introduction_at_protocol"},{"short_id":"ayuzlt","created_at":"2025-10-06T08:02:09.000-05:00","title":"Obelisk 0.25.4 and handling of WASM traps","url":"https://obeli.sk/blog/announcing-obelisk-0-25-4/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"tomas","user_is_author":true,"tags":["release","rust","wasm"],"short_id_url":"https://lobste.rs/s/ayuzlt","comments_url":"https://lobste.rs/s/ayuzlt/obelisk_0_25_4_handling_wasm_traps"},{"short_id":"8whlqu","created_at":"2025-10-06T07:40:47.000-05:00","title":"AI and Home-Cooked Software","url":"https://mrkaran.dev/posts/ai-home-cooked-software/","score":11,"flags":0,"comment_count":5,"description":"\u003cp\u003e\u003ca href=\"https://mrkaran.dev/posts/ai-home-cooked-software/\" rel=\"ugc\"\u003ehttps://mrkaran.dev/posts/ai-home-cooked-software/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"https://mrkaran.dev/posts/ai-home-cooked-software/","submitter_user":"mrkaran","user_is_author":true,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/8whlqu","comments_url":"https://lobste.rs/s/8whlqu/ai_home_cooked_software"},{"short_id":"xlqurj","created_at":"2025-10-06T07:33:43.000-05:00","title":"My First Contribution to Linux","url":"https://vkoskiv.com/first-linux-patch/","score":18,"flags":0,"comment_count":1,"description":"","description_plain":"","submitter_user":"vkoskiv","user_is_author":true,"tags":["linux","programming"],"short_id_url":"https://lobste.rs/s/xlqurj","comments_url":"https://lobste.rs/s/xlqurj/my_first_contribution_linux"},{"short_id":"mahsz8","created_at":"2025-10-06T07:10:55.000-05:00","title":"What are you doing this week?","url":"","score":4,"flags":0,"comment_count":4,"description":"\u003cp\u003eWhat are you doing this week? Feel free to share!\u003c/p\u003e\n\u003cp\u003eKeep in mind it’s OK to do nothing at all, too.\u003c/p\u003e\n","description_plain":"What are you doing this week? Feel free to share!\r\n\r\nKeep in mind it’s OK to do nothing at all, too.","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"],"short_id_url":"https://lobste.rs/s/mahsz8","comments_url":"https://lobste.rs/s/mahsz8/what_are_you_doing_this_week"},{"short_id":"4ftndd","created_at":"2025-10-06T06:54:26.000-05:00","title":"A case for learning GPU programming with a compute-first mindset","url":"https://themaister.net/blog/2025/10/05/a-case-for-learning-gpu-programming-with-a-compute-first-mindset/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"LesleyLai","user_is_author":false,"tags":["graphics"],"short_id_url":"https://lobste.rs/s/4ftndd","comments_url":"https://lobste.rs/s/4ftndd/case_for_learning_gpu_programming_with"},{"short_id":"2ykcqe","created_at":"2025-10-06T05:41:52.000-05:00","title":"Why do LLMs freak out over the seahorse emoji?","url":"https://vgel.me/posts/seahorse","score":31,"flags":1,"comment_count":3,"description":"","description_plain":"","submitter_user":"eph","user_is_author":false,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/2ykcqe","comments_url":"https://lobste.rs/s/2ykcqe/why_do_llms_freak_out_over_seahorse_emoji"},{"short_id":"d9woun","created_at":"2025-10-06T04:28:43.000-05:00","title":"MongoDB is Web Scale (2010)","url":"https://youtube.com/watch?v=b2F-DItXtZs","score":1,"flags":0,"comment_count":3,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["databases","satire","video"],"short_id_url":"https://lobste.rs/s/d9woun","comments_url":"https://lobste.rs/s/d9woun/mongodb_is_web_scale_2010"},{"short_id":"fogifv","created_at":"2025-10-06T04:11:31.000-05:00","title":"Django: one ORM to rule all databases","url":"https://www.paulox.net/2025/10/06/django-orm-comparison/","score":8,"flags":1,"comment_count":3,"description":"","description_plain":"","submitter_user":"pauloxnet","user_is_author":true,"tags":["databases","python","web"],"short_id_url":"https://lobste.rs/s/fogifv","comments_url":"https://lobste.rs/s/fogifv/django_one_orm_rule_all_databases"},{"short_id":"lm0p8u","created_at":"2025-10-06T04:08:24.000-05:00","title":"The QNX Operating System","url":"https://www.abortretry.fail/p/the-qnx-operating-system","score":18,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"asymmetric","user_is_author":false,"tags":["historical","osdev"],"short_id_url":"https://lobste.rs/s/lm0p8u","comments_url":"https://lobste.rs/s/lm0p8u/qnx_operating_system"},{"short_id":"uihcec","created_at":"2025-10-06T01:22:42.000-05:00","title":"gem.coop","url":"https://gem.coop/","score":86,"flags":0,"comment_count":14,"description":"","description_plain":"","submitter_user":"kevinc","user_is_author":false,"tags":["ruby"],"short_id_url":"https://lobste.rs/s/uihcec","comments_url":"https://lobste.rs/s/uihcec/gem_coop"},{"short_id":"voi3sp","created_at":"2025-10-06T01:15:28.000-05:00","title":"Simple automated deployments using git push (2024)","url":"https://garrido.io/notes/simple-automated-deployments-git-push/","score":11,"flags":0,"comment_count":5,"description":"","description_plain":"","submitter_user":"eduard","user_is_author":false,"tags":["devops","vcs"],"short_id_url":"https://lobste.rs/s/voi3sp","comments_url":"https://lobste.rs/s/voi3sp/simple_automated_deployments_using_git"},{"short_id":"zo5arc","created_at":"2025-10-05T19:42:16.000-05:00","title":"NIRS fire destroys [South Korean] government's cloud storage system, no backups available","url":"https://koreajoongangdaily.joins.com/news/2025-10-01/national/socialAffairs/NIRS-fire-destroys-governments-cloud-storage-system-no-backups-available/2412936","score":63,"flags":2,"comment_count":19,"description":"","description_plain":"","submitter_user":"teymour","user_is_author":false,"tags":["hardware"],"short_id_url":"https://lobste.rs/s/zo5arc","comments_url":"https://lobste.rs/s/zo5arc/nirs_fire_destroys_south_korean"},{"short_id":"jx047q","created_at":"2025-10-05T17:44:11.000-05:00","title":"Premature Generalization","url":"https://youtu.be/P5lNzRA8rYI","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"krig","user_is_author":false,"tags":["practices","video"],"short_id_url":"https://lobste.rs/s/jx047q","comments_url":"https://lobste.rs/s/jx047q/premature_generalization"},{"short_id":"3p1uht","created_at":"2025-10-05T16:06:29.000-05:00","title":"cargo-subspace: Make rust-analyzer work better with very large cargo workspaces","url":"https://github.com/ethowitz/cargo-subspace","score":6,"flags":0,"comment_count":5,"description":"\u003cp\u003e\u003cstrong\u003eLet me preface all of this by saying that rust-analyzer is an amazing project, and I am eternally grateful for the many people who contribute to it! It makes developing rust code a breeze, and it has surely significantly contributed to Rust's widespread adoption.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eIf you've ever worked with a very large cargo workspace (think hundreds of crates), you know that rust-analyzer eagerly builds compile time dependencies (e.g. proc macros) and indexes all the crates in your workspace at startup. For very large workspaces, this can take quite a while. Even after indexing is complete, operations like searching for symbols and autocomplete can be laggy. If you often open and close your editor (shout out to all the (neo)vim users out there), it can take a few minutes for rust-analyzer to finish starting up again. Setting \u003ccode\u003echeck.workspace = false\u003c/code\u003e and \u003ccode\u003ecachePriming.enable = false\u003c/code\u003e can help significantly, but in my experience, they don't solve the problem completely.\u003c/p\u003e\n\u003cp\u003eAfter reading through the rust-analyzer manual, I noticed that rust-analyzer supports integrating with third party build tools, like bazel and buck. In short, it is possible to point rust-analyzer to a command that it will invoke with a path to a source code file to discover information about the crate that the file belongs to. This \"automatic project discovery\" is intended to give third party build tools a way to communicate information about the structure of a project (e.g. the dependency graph) such that rust-analyzer doesn't need to use cargo. I realized that, theoretically, it should be possible to write a tool that still uses cargo under the hood and selectively tells rust-analyzer about a workspace's dependency graph as new files are opened.\u003c/p\u003e\n\u003cp\u003eThat's where cargo-subspace comes in. cargo-subspace is a CLI tool that takes a path to a source code file as an argument and prints out information about the crate that the file belongs to and that crate's dependencies. It works like this:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFind the manifest path (i.e. the path to the Cargo.toml) for the source code file's crate to determine the crate that owns the file\u003c/li\u003e\n\u003cli\u003eInvoke \u003ccode\u003ecargo metadata\u003c/code\u003e, which returns the full dependency graph for the workspace\u003c/li\u003e\n\u003cli\u003ePrune the dependency graph so that it only contains the file's crate and that crate's dependencies\u003c/li\u003e\n\u003cli\u003eBuild compile time dependencies (e.g. proc macros and build scripts) for only the crates in the pruned dependency graph\u003c/li\u003e\n\u003cli\u003ePrint the pruned dependency graph in the JSON format expected by rust-analyzer\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs you open new files in your editor, rust-analyzer will invoke the tool to discover information about how the crate fits into the larger dependency graph of the workspace, lazily indexing and building compile time dependencies as you go. I've found that this approach significantly reduces rust-analyzer's startup time and makes it much zipper and more stable.\u003c/p\u003e\n\u003cp\u003eIf you frequently work with very large cargo workspaces, I'd love for you to try it out and give me some feedback. I tested it myself and it seems to work the way I'd expect, but I'm sure there are some edge cases I haven't considered. There are also some other features I'm considering adding (e.g. an option to include all the dependents of a crate in the dependency graph and not just the dependencies, the ability to read from an \"allowlist\" file to always index and load a subset of the crates in the workspace, etc.), and I'd be curious to hear if y'all have any other ideas/requests.  Installation and configuration instructions can be found in the README.\u003c/p\u003e\n\u003cp\u003eThanks for reading, and happy rusting!\u003c/p\u003e\n","description_plain":"**Let me preface all of this by saying that rust-analyzer is an amazing project, and I am eternally grateful for the many people who contribute to it! It makes developing rust code a breeze, and it has surely significantly contributed to Rust's widespread adoption.**\r\n\r\nIf you've ever worked with a very large cargo workspace (think hundreds of crates), you know that rust-analyzer eagerly builds compile time dependencies (e.g. proc macros) and indexes all the crates in your workspace at startup. For very large workspaces, this can take quite a while. Even after indexing is complete, operations like searching for symbols and autocomplete can be laggy. If you often open and close your editor (shout out to all the (neo)vim users out there), it can take a few minutes for rust-analyzer to finish starting up again. Setting `check.workspace = false` and `cachePriming.enable = false` can help significantly, but in my experience, they don't solve the problem completely.\r\n\r\nAfter reading through the rust-analyzer manual, I noticed that rust-analyzer supports integrating with third party build tools, like bazel and buck. In short, it is possible to point rust-analyzer to a command that it will invoke with a path to a source code file to discover information about the crate that the file belongs to. This \"automatic project discovery\" is intended to give third party build tools a way to communicate information about the structure of a project (e.g. the dependency graph) such that rust-analyzer doesn't need to use cargo. I realized that, theoretically, it should be possible to write a tool that still uses cargo under the hood and selectively tells rust-analyzer about a workspace's dependency graph as new files are opened.\r\n\r\nThat's where cargo-subspace comes in. cargo-subspace is a CLI tool that takes a path to a source code file as an argument and prints out information about the crate that the file belongs to and that crate's dependencies. It works like this:\r\n\r\n- Find the manifest path (i.e. the path to the Cargo.toml) for the source code file's crate to determine the crate that owns the file\r\n- Invoke `cargo metadata`, which returns the full dependency graph for the workspace\r\n- Prune the dependency graph so that it only contains the file's crate and that crate's dependencies\r\n- Build compile time dependencies (e.g. proc macros and build scripts) for only the crates in the pruned dependency graph\r\n- Print the pruned dependency graph in the JSON format expected by rust-analyzer\r\n\r\nAs you open new files in your editor, rust-analyzer will invoke the tool to discover information about how the crate fits into the larger dependency graph of the workspace, lazily indexing and building compile time dependencies as you go. I've found that this approach significantly reduces rust-analyzer's startup time and makes it much zipper and more stable.\r\n\r\nIf you frequently work with very large cargo workspaces, I'd love for you to try it out and give me some feedback. I tested it myself and it seems to work the way I'd expect, but I'm sure there are some edge cases I haven't considered. There are also some other features I'm considering adding (e.g. an option to include all the dependents of a crate in the dependency graph and not just the dependencies, the ability to read from an \"allowlist\" file to always index and load a subset of the crates in the workspace, etc.), and I'd be curious to hear if y'all have any other ideas/requests.  Installation and configuration instructions can be found in the README.\r\n\r\nThanks for reading, and happy rusting!","submitter_user":"aerolime","user_is_author":true,"tags":["rust"],"short_id_url":"https://lobste.rs/s/3p1uht","comments_url":"https://lobste.rs/s/3p1uht/cargo_subspace_make_rust_analyzer_work"}]