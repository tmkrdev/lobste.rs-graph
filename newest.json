[{"short_id":"youq7y","short_id_url":"https://lobste.rs/s/youq7y","created_at":"2025-03-27T08:26:01.000-05:00","title":"How to Write Blog Posts that Developers Read","url":"https://refactoringenglish.com/chapters/write-blog-posts-developers-read/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/youq7y/how_write_blog_posts_developers_read","submitter_user":"mtlynch","user_is_author":true,"tags":["practices"]},{"short_id":"vzpfuh","short_id_url":"https://lobste.rs/s/vzpfuh","created_at":"2025-03-27T06:57:33.000-05:00","title":"Building Standardized AI Tools with the Model Context Protocol (MCP)","url":"https://www.innoq.com/en/articles/2025/03/model-context-protocol/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vzpfuh/building_standardized_ai_tools_with","submitter_user":"youngbrioche","user_is_author":false,"tags":["ai","java"]},{"short_id":"gwczh4","short_id_url":"https://lobste.rs/s/gwczh4","created_at":"2025-03-27T06:45:47.000-05:00","title":"Elastic BBQ: Better Binary Quantization in Lucene \u0026 Elasticsearch","url":"https://www.elastic.co/search-labs/blog/better-binary-quantization-lucene-elasticsearch","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gwczh4/elastic_bbq_better_binary_quantization","submitter_user":"Mordo","user_is_author":false,"tags":["ai","performance"]},{"short_id":"7bjnli","short_id_url":"https://lobste.rs/s/7bjnli","created_at":"2025-03-27T05:37:50.000-05:00","title":"Writing Useful Documentation","url":"https://www.blog.philodev.one/posts/2024-07-writing-documentation/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7bjnli/writing_useful_documentation","submitter_user":"iggle","user_is_author":false,"tags":["practices"]},{"short_id":"ye8vcd","short_id_url":"https://lobste.rs/s/ye8vcd","created_at":"2025-03-27T04:50:25.000-05:00","title":"prepare()-ing for execution: a new API for process creation","url":"https://gist.github.com/clausecker/721cda7172b82c179032859f3216a8ee","score":13,"flags":0,"comment_count":5,"description":"\u003cp\u003eUNIX famously uses fork+exec to create processes, a simple API that is nevertheless quite tricky to use correctly and that comes with a bunch of problems. The alternative, spawn, as used by VMS, Windows NT and recently POSIX, fixes many of these issues but it overly complex and makes it hard to add new features.\u003c/p\u003e\n\u003cp\u003eprepare() is a proposed API to simplify process creation. When calling prepare(), the current thread enters “preparation state.” That means, a nascent process is created and the current thread is moved to the context of this process, but without changing memory maps (this is similar to how vfork() works). Inside the nascent process, you can configure the environment as desired and then call prep_execve() to execute a new program. On success, prep_execve() leaves preparation state, moving the current thread back to the parent’s process context and returns (!) the pid of the now grownup child. You can also use prep_exit() to abort the child without executing a new process, it similarly returns the pid of the now zombified child.\u003c/p\u003e\n\u003cp\u003eHere’s an example for executing a child with stdout redirected to /dev/null:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint stfu(char *prog, char *argv[]) {\n    if (prepare(NULL) == -1)\n        return (-1);\n\n    int fd = open(\"/dev/null\", O_WRONLY);\n    if (fd == -1) {\n        return (prep_exit(1));\n    }\n\n    dup2(fd, 1);\n    close(fd);\n\n    int pid = prep_execve(prog, argv, environ);\n    if (pid == -1) {\n        return (prep_exit(1));\n    }\n\n    return (pid);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe key advantage of this API is that it has completely linear control flow like spawn, while preserving the flexible builder-pattern provided by fork+exec. No double-return shenanigans like with fork and execve. And because the nascent process shares memory with the parent, it’s possible to communicate failure to execute and similar stuff using simple variables.\u003c/p\u003e\n","description_plain":"UNIX famously uses fork+exec to create processes, a simple API that is nevertheless quite tricky to use correctly and that comes with a bunch of problems. The alternative, spawn, as used by VMS, Windows NT and recently POSIX, fixes many of these issues but it overly complex and makes it hard to add new features.\r\n\r\nprepare() is a proposed API to simplify process creation. When calling prepare(), the current thread enters “preparation state.” That means, a nascent process is created and the current thread is moved to the context of this process, but without changing memory maps (this is similar to how vfork() works). Inside the nascent process, you can configure the environment as desired and then call prep_execve() to execute a new program. On success, prep_execve() leaves preparation state, moving the current thread back to the parent's process context and returns (!) the pid of the now grownup child. You can also use prep_exit() to abort the child without executing a new process, it similarly returns the pid of the now zombified child.\r\n\r\nHere's an example for executing a child with stdout redirected to /dev/null:\r\n\r\n    int stfu(char *prog, char *argv[]) {\r\n        if (prepare(NULL) == -1)\r\n            return (-1);\r\n\r\n        int fd = open(\"/dev/null\", O_WRONLY);\r\n        if (fd == -1) {\r\n            return (prep_exit(1));\r\n        }\r\n\r\n        dup2(fd, 1);\r\n        close(fd);\r\n\r\n        int pid = prep_execve(prog, argv, environ);\r\n        if (pid == -1) {\r\n            return (prep_exit(1));\r\n        }\r\n\r\n        return (pid);\r\n    }\r\n\r\nThe key advantage of this API is that it has completely linear control flow like spawn, while preserving the flexible builder-pattern provided by fork+exec. No double-return shenanigans like with fork and execve. And because the nascent process shares memory with the parent, it's possible to communicate failure to execute and similar stuff using simple variables.","comments_url":"https://lobste.rs/s/ye8vcd/prepare_ing_for_execution_new_api_for","submitter_user":"fuz","user_is_author":true,"tags":["api","show","unix"]},{"short_id":"pntonn","short_id_url":"https://lobste.rs/s/pntonn","created_at":"2025-03-27T04:05:35.000-05:00","title":"War story: the hardest bug I ever debugged","url":"https://www.clientserver.dev/p/war-story-the-hardest-bug-i-ever","score":10,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pntonn/war_story_hardest_bug_i_ever_debugged","submitter_user":"anunaym14","user_is_author":false,"tags":["debugging"]},{"short_id":"l9ohid","short_id_url":"https://lobste.rs/s/l9ohid","created_at":"2025-03-27T02:27:03.000-05:00","title":"RealtimeKit and CPU Scheduling","url":"https://venam.net/blog/unix/2025/03/24/rtkit.html","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/l9ohid/realtimekit_cpu_scheduling","submitter_user":"venam","user_is_author":true,"tags":["linux"]},{"short_id":"wnkazo","short_id_url":"https://lobste.rs/s/wnkazo","created_at":"2025-03-27T02:10:58.000-05:00","title":"Decent-Auth:  backend auth library that works in several different languages via WASM","url":"https://github.com/lastlogin-net/decent-auth","score":1,"flags":0,"comment_count":1,"description":"\u003cp\u003eExplanation from author \u003ca href=\"https://news.ycombinator.com/item?id=43484120\" rel=\"ugc\"\u003ehttps://news.ycombinator.com/item?id=43484120\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003eActual implementation is in the rust repo. I found the node binding to be the easiest to follow.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://lobste.rs/s/fm08m8/extism_make_all_software_programmable\" rel=\"ugc\"\u003ehttps://lobste.rs/s/fm08m8/extism_make_all_software_programmable\u003c/a\u003e was posted here before with overall negative feedback.\u003c/p\u003e\n","description_plain":"Explanation from author https://news.ycombinator.com/item?id=43484120\r\n\r\nActual implementation is in the rust repo. I found the node binding to be the easiest to follow.\r\n\r\nhttps://lobste.rs/s/fm08m8/extism_make_all_software_programmable was posted here before with overall negative feedback.","comments_url":"https://lobste.rs/s/wnkazo/decent_auth_backend_auth_library_works","submitter_user":"taras","user_is_author":false,"tags":["wasm","web"]},{"short_id":"knhzsd","short_id_url":"https://lobste.rs/s/knhzsd","created_at":"2025-03-27T01:58:40.000-05:00","title":"Oracle customers confirm data stolen in alleged cloud breach is valid","url":"https://www.bleepingcomputer.com/news/security/oracle-customers-confirm-data-stolen-in-alleged-cloud-breach-is-valid/","score":4,"flags":0,"comment_count":2,"description":"\u003cp\u003etl;dr: Though Oracle denies it, a hacker produced valid data from Oracle customers.\u003c/p\u003e\n","description_plain":"tl;dr: Though Oracle denies it, a hacker produced valid data from Oracle customers.","comments_url":"https://lobste.rs/s/knhzsd/oracle_customers_confirm_data_stolen","submitter_user":"veqq","user_is_author":false,"tags":["security"]},{"short_id":"6v626z","short_id_url":"https://lobste.rs/s/6v626z","created_at":"2025-03-27T00:44:30.000-05:00","title":"Reasoning by Analogy","url":"https://thoughtbot.com/blog/reasoning-by-analogy","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6v626z/reasoning_by_analogy","submitter_user":"Kerrick","user_is_author":false,"tags":["elm"]},{"short_id":"knemhd","short_id_url":"https://lobste.rs/s/knemhd","created_at":"2025-03-26T22:53:11.000-05:00","title":"Tunneling corporate firewalls for developers","url":"https://blog.frost.kiwi/tunneling-corporate-firewalls/","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/knemhd/tunneling_corporate_firewalls_for","submitter_user":"FrostKiwi","user_is_author":true,"tags":["devops","security","web"]},{"short_id":"ikzacv","short_id_url":"https://lobste.rs/s/ikzacv","created_at":"2025-03-26T21:47:26.000-05:00","title":"Bevy Meetup - Intermediate Representations for Reactive Structures","url":"https://www.youtube.com/watch?v=JeXOajFv8Dk","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ikzacv/bevy_meetup_intermediate","submitter_user":"extrawurst","user_is_author":false,"tags":["rust","video"]},{"short_id":"rurjmx","short_id_url":"https://lobste.rs/s/rurjmx","created_at":"2025-03-26T19:45:45.000-05:00","title":"Fedora-based Linux distribution marking to EU public sector","url":"https://www.linuxjournal.com/content/eu-os-bold-step-toward-digital-sovereignty-europe","score":18,"flags":4,"comment_count":13,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rurjmx/fedora_based_linux_distribution_marking","submitter_user":"strugee","user_is_author":false,"tags":["linux"]},{"short_id":"lyifc7","short_id_url":"https://lobste.rs/s/lyifc7","created_at":"2025-03-26T19:20:27.000-05:00","title":"Matrix Profiles","url":"https://aneksteind.github.io/posts/2025-03-26.html","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lyifc7/matrix_profiles","submitter_user":"pao","user_is_author":true,"tags":["compsci"]},{"short_id":"j2ec2q","short_id_url":"https://lobste.rs/s/j2ec2q","created_at":"2025-03-26T18:47:47.000-05:00","title":"Betteridge's Law of Software Engineering Specialness","url":"https://buttondown.com/hillelwayne/archive/betteridges-law-of-software-engineering/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/j2ec2q/betteridge_s_law_software_engineering","submitter_user":"fanf","user_is_author":false,"tags":["practices"]},{"short_id":"b2yv9c","short_id_url":"https://lobste.rs/s/b2yv9c","created_at":"2025-03-26T17:44:00.000-05:00","title":"Google will now develop the Android OS in private","url":"https://www.androidauthority.com/google-android-development-aosp-3538503/","score":31,"flags":1,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/b2yv9c/google_will_now_develop_android_os","submitter_user":"downrightnifty","user_is_author":false,"tags":["android"]},{"short_id":"9xkrhc","short_id_url":"https://lobste.rs/s/9xkrhc","created_at":"2025-03-26T17:11:44.000-05:00","title":"Hyperlight Wasm: Fast, secure, and OS-free","url":"https://opensource.microsoft.com/blog/2025/03/26/hyperlight-wasm-fast-secure-and-os-free/","score":13,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9xkrhc/hyperlight_wasm_fast_secure_os_free","submitter_user":"calvin","user_is_author":false,"tags":["release","rust","virtualization","wasm"]},{"short_id":"avdvvx","short_id_url":"https://lobste.rs/s/avdvvx","created_at":"2025-03-26T16:55:42.000-05:00","title":"A Very (!) Early Play With Astral's Red Knot Static Type Checker","url":"https://jurasofish.github.io/a-very-early-play-with-astrals-red-knot-static-type-checker.html","score":6,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/avdvvx/very_early_play_with_astral_s_red_knot","submitter_user":"spookylukey","user_is_author":false,"tags":["ai","python"]},{"short_id":"rgtmc1","short_id_url":"https://lobste.rs/s/rgtmc1","created_at":"2025-03-26T16:21:22.000-05:00","title":"A Daft proc-macro trick: How to Emit Partial-Code + Errors","url":"https://schneems.com/2025/03/26/a-daft-procmacro-trick-how-to-emit-partialcode-errors/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rgtmc1/daft_proc_macro_trick_how_emit_partial","submitter_user":"PuercoPop","user_is_author":false,"tags":["rust"]},{"short_id":"hhi7vb","short_id_url":"https://lobste.rs/s/hhi7vb","created_at":"2025-03-26T16:13:47.000-05:00","title":"Commandments of reproducible builds","url":"https://reproducible-builds.org/docs/commandments/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hhi7vb/commandments_reproducible_builds","submitter_user":"kaycebasques","user_is_author":false,"tags":["programming"]},{"short_id":"dygvyk","short_id_url":"https://lobste.rs/s/dygvyk","created_at":"2025-03-26T14:45:07.000-05:00","title":"Revisiting CSS border-image","url":"https://css-tricks.com/revisiting-css-border-image/","score":9,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dygvyk/revisiting_css_border_image","submitter_user":"Kerrick","user_is_author":false,"tags":["css"]},{"short_id":"llixz2","short_id_url":"https://lobste.rs/s/llixz2","created_at":"2025-03-26T14:22:16.000-05:00","title":"Blasting Past Webp","url":"https://googleprojectzero.blogspot.com/2025/03/blasting-past-webp.html","score":13,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/llixz2/blasting_past_webp","submitter_user":"freddyb","user_is_author":false,"tags":["security"]},{"short_id":"mvlkdq","short_id_url":"https://lobste.rs/s/mvlkdq","created_at":"2025-03-26T14:17:31.000-05:00","title":"Servo vs Ladybird","url":"https://thelibre.news/servo-vs-ladybird/","score":53,"flags":1,"comment_count":10,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mvlkdq/servo_vs_ladybird","submitter_user":"ucirello","user_is_author":false,"tags":["browsers"]},{"short_id":"rckxbp","short_id_url":"https://lobste.rs/s/rckxbp","created_at":"2025-03-26T12:23:17.000-05:00","title":"You just can’t be Googling ‘Select’","url":"https://sophiabits.com/blog/you-just-cant-be-googling-select","score":9,"flags":0,"comment_count":24,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rckxbp/you_just_can_t_be_googling_select","submitter_user":"Kerrick","user_is_author":false,"tags":["practices","programming"]},{"short_id":"tzqlyn","short_id_url":"https://lobste.rs/s/tzqlyn","created_at":"2025-03-26T11:50:47.000-05:00","title":"Ferrous Systems Donates Ferrocene Language Specification to Rust Project","url":"https://rustfoundation.org/media/ferrous-systems-donates-ferrocene-language-specification-to-rust-project/","score":81,"flags":1,"comment_count":23,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tzqlyn/ferrous_systems_donates_ferrocene","submitter_user":"steveklabnik","user_is_author":false,"tags":["rust"]}]