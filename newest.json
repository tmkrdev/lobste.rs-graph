[{"short_id":"4guing","short_id_url":"https://lobste.rs/s/4guing","created_at":"2025-03-17T15:10:57.000-05:00","title":"After 47 years, OpenVMS gets a package manager (VSP)","url":"https://raymii.org/s/blog/After_47_years_OpenVMS_gets_a_package_manager_VSP.html","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/4guing/after_47_years_openvms_gets_package","submitter_user":"raymii","user_is_author":true,"tags":["networking","osdev"]},{"short_id":"hqxvb6","short_id_url":"https://lobste.rs/s/hqxvb6","created_at":"2025-03-17T14:23:08.000-05:00","title":"The Atrocious State Of Binary Compatibility on Linux and How To Address It","url":"https://jangafx.com/insights/linux-binary-compatibility","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/hqxvb6/atrocious_state_binary_compatibility_on","submitter_user":"calvin","user_is_author":false,"tags":["linux"]},{"short_id":"speged","short_id_url":"https://lobste.rs/s/speged","created_at":"2025-03-17T14:11:13.000-05:00","title":"Verifiability is the Limit","url":"https://alperenkeles.com/posts/verifiability-is-the-limit/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/speged/verifiability_is_limit","submitter_user":"hwayne","user_is_author":false,"tags":["ai","practices"]},{"short_id":"tzjxrc","short_id_url":"https://lobste.rs/s/tzjxrc","created_at":"2025-03-17T13:24:49.000-05:00","title":"Password reuse is rampant: nearly half of observed user logins are compromised","url":"https://blog.cloudflare.com/password-reuse-rampant-half-user-logins-compromised/","score":1,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tzjxrc/password_reuse_is_rampant_nearly_half","submitter_user":"gmem","user_is_author":false,"tags":["security"]},{"short_id":"yhxoqu","short_id_url":"https://lobste.rs/s/yhxoqu","created_at":"2025-03-17T12:38:06.000-05:00","title":"Tiny Pointers","url":"https://arxiv.org/abs/2111.12800","score":4,"flags":0,"comment_count":1,"description":"\u003cp\u003eThis paper introduces a new data-structural object that we call the tiny pointer. In many applications,\ntraditional log n-bit pointers can be replaced with o(log n)-bit tiny pointers at the cost of only a constantfactor time overhead. We develop a comprehensive theory of tiny pointers, and give optimal constructions\nfor both fixed-size tiny pointers (i.e., settings in which all of the tiny pointers must be the same size)\nand variable-size tiny pointers (i.e., settings in which the average tiny-pointer size must be small, but\nsome tiny pointers can be larger). If a tiny pointer references an element in an array filled to load factor\n1−1/k, then the optimal tiny-pointer size is Θ(log log log n+log k) bits in the fixed-size case, and Θ(log k)\nexpected bits in the variable-size case. Our tiny-pointer constructions also require us to revisit several\nclassic problems having to do with balls and bins; these results may be of independent interest.\u003c/p\u003e\n\u003cp\u003eUsing tiny pointers, we revisit five classic data-structure problems. We show that:\u003c/p\u003e\n\u003cp\u003e• A data structure storing n v-bit values for n keys with constant-time modifications/queries can be\nimplemented to take space nv +O(n log(r) n) bits, for any constant r \u0026gt; 0, as long as the user stores\na tiny pointer of expected size O(1) with each key—here, log(r) n is the r-th iterated logarithm.\u003c/p\u003e\n\u003cp\u003e• Any binary search tree can be made succinct with constant-factor time overhead, and can even be\nmade to be within O(n) bits of optimal if we allow for O(log∗ n)-time modifications—this holds\neven for rotation-based trees such as the splay tree and the red-black tree.\u003c/p\u003e\n\u003cp\u003e• Any fixed-capacity key-value dictionary can be made stable (i.e., items do not move once inserted)\nwith constant-time overhead and 1 + o(1) space overhead.\u003c/p\u003e\n\u003cp\u003e• Any key-value dictionary that requires uniform-size values can be made to support arbitrary-size\nvalues with constant-time overhead and with an additional space consumption of log(r) n+O(log j)\nbits per j-bit value for an arbitrary constant r \u0026gt; 0 of our choice.\n• Given an external-memory array A of size (1 + ε)n containing a dynamic set of up to n key-value\npairs, it is possible to maintain an internal-memory stash of size O(n log ε−1) bits so that the\nlocation of any key-value pair in A can be computed in constant time (and with no IOs).\nThese are all well studied and classic problems, and in each case tiny pointers allow for us to take a natural space-inefficient solution that uses pointers and make it space-efficient for free\u003c/p\u003e\n","description_plain":"This paper introduces a new data-structural object that we call the tiny pointer. In many applications,\r\ntraditional log n-bit pointers can be replaced with o(log n)-bit tiny pointers at the cost of only a constantfactor time overhead. We develop a comprehensive theory of tiny pointers, and give optimal constructions\r\nfor both fixed-size tiny pointers (i.e., settings in which all of the tiny pointers must be the same size)\r\nand variable-size tiny pointers (i.e., settings in which the average tiny-pointer size must be small, but\r\nsome tiny pointers can be larger). If a tiny pointer references an element in an array filled to load factor\r\n1−1/k, then the optimal tiny-pointer size is Θ(log log log n+log k) bits in the fixed-size case, and Θ(log k)\r\nexpected bits in the variable-size case. Our tiny-pointer constructions also require us to revisit several\r\nclassic problems having to do with balls and bins; these results may be of independent interest.\r\n\r\nUsing tiny pointers, we revisit five classic data-structure problems. We show that:\r\n\r\n• A data structure storing n v-bit values for n keys with constant-time modifications/queries can be\r\nimplemented to take space nv +O(n log(r) n) bits, for any constant r \u003e 0, as long as the user stores\r\na tiny pointer of expected size O(1) with each key—here, log(r) n is the r-th iterated logarithm.\r\n\r\n• Any binary search tree can be made succinct with constant-factor time overhead, and can even be\r\nmade to be within O(n) bits of optimal if we allow for O(log∗ n)-time modifications—this holds\r\neven for rotation-based trees such as the splay tree and the red-black tree.\r\n\r\n• Any fixed-capacity key-value dictionary can be made stable (i.e., items do not move once inserted)\r\nwith constant-time overhead and 1 + o(1) space overhead.\r\n\r\n• Any key-value dictionary that requires uniform-size values can be made to support arbitrary-size\r\nvalues with constant-time overhead and with an additional space consumption of log(r) n+O(log j)\r\nbits per j-bit value for an arbitrary constant r \u003e 0 of our choice.\r\n• Given an external-memory array A of size (1 + ε)n containing a dynamic set of up to n key-value\r\npairs, it is possible to maintain an internal-memory stash of size O(n log ε−1) bits so that the\r\nlocation of any key-value pair in A can be computed in constant time (and with no IOs).\r\nThese are all well studied and classic problems, and in each case tiny pointers allow for us to take a natural space-inefficient solution that uses pointers and make it space-efficient for free","comments_url":"https://lobste.rs/s/yhxoqu/tiny_pointers","submitter_user":"MatheusRich","user_is_author":false,"tags":["programming"]},{"short_id":"s5p1ng","short_id_url":"https://lobste.rs/s/s5p1ng","created_at":"2025-03-17T12:36:20.000-05:00","title":"Announcing Snix","url":"https://snix.dev/blog/announcing-snix/","score":10,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/s5p1ng/announcing_snix","submitter_user":"domenkozar","user_is_author":false,"tags":["nix"]},{"short_id":"7iel5b","short_id_url":"https://lobste.rs/s/7iel5b","created_at":"2025-03-17T12:07:43.000-05:00","title":"The Rhombus Programming Language","url":"https://rhombus-lang.org","score":4,"flags":0,"comment_count":2,"description":"\u003cp\u003eRhombus is ready for early adopters.\nLearn more and get it now at \u003ca href=\"https://rhombus-lang.org/\" rel=\"ugc\"\u003ehttps://rhombus-lang.org/\u003c/a\u003e\u003c/p\u003e\n","description_plain":"Rhombus is ready for early adopters. \r\nLearn more and get it now at https://rhombus-lang.org/","comments_url":"https://lobste.rs/s/7iel5b/rhombus_programming_language","submitter_user":"spdegabrielle","user_is_author":false,"tags":["lisp","plt"]},{"short_id":"pw3uzf","short_id_url":"https://lobste.rs/s/pw3uzf","created_at":"2025-03-17T11:57:25.000-05:00","title":"Zero-Knowledge Proofs","url":"https://youtu.be/Otvcbw6k4eo","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pw3uzf/zero_knowledge_proofs","submitter_user":"altano","user_is_author":false,"tags":["cryptography","video"]},{"short_id":"3mjwud","short_id_url":"https://lobste.rs/s/3mjwud","created_at":"2025-03-17T11:35:44.000-05:00","title":"Bypassing Authentication Like It’s The ‘90s - Pre-Auth RCE Chain(s) in Kentico Xperience CMS","url":"https://labs.watchtowr.com/bypassing-authentication-like-its-the-90s-pre-auth-rce-chain-s-in-kentico-xperience-cms/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3mjwud/bypassing_authentication_like_it_s_90s","submitter_user":"eBPF","user_is_author":false,"tags":["security"]},{"short_id":"zmreeg","short_id_url":"https://lobste.rs/s/zmreeg","created_at":"2025-03-17T10:25:49.000-05:00","title":"Introducing Intel® Advanced Performance Extensions (Intel® APX)","url":"https://www.intel.com/content/www/us/en/developer/articles/technical/advanced-performance-extensions-apx.html","score":11,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/zmreeg/introducing_intel_advanced_performance","submitter_user":"williballenthin","user_is_author":false,"tags":["hardware"]},{"short_id":"r8mdl9","short_id_url":"https://lobste.rs/s/r8mdl9","created_at":"2025-03-17T10:10:25.000-05:00","title":"HTTP/3 is everywhere but nowhere","url":"https://httptoolkit.com/blog/http3-quic-open-source-support-nowhere/","score":15,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/r8mdl9/http_3_is_everywhere_nowhere","submitter_user":"eduard","user_is_author":false,"tags":["web"]},{"short_id":"d69ogy","short_id_url":"https://lobste.rs/s/d69ogy","created_at":"2025-03-17T10:02:04.000-05:00","title":"Installing the sassc Ruby gem on a Mac. A debugging story","url":"https://www.schneems.com/2025/03/17/installing-the-sassc-ruby-gem-on-a-mac-a-debugging-story/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/d69ogy/installing_sassc_ruby_gem_on_mac","submitter_user":"schneems","user_is_author":true,"tags":["ruby"]},{"short_id":"tb9lr7","short_id_url":"https://lobste.rs/s/tb9lr7","created_at":"2025-03-17T08:32:32.000-05:00","title":"Optimal Bounds for Open Addressing Without Reordering","url":"https://arxiv.org/abs/2501.02305","score":3,"flags":0,"comment_count":4,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/tb9lr7/optimal_bounds_for_open_addressing","submitter_user":"cyplo","user_is_author":false,"tags":["plt"]},{"short_id":"w05k9f","short_id_url":"https://lobste.rs/s/w05k9f","created_at":"2025-03-17T08:21:24.000-05:00","title":"I built myself a watch","url":"https://www.thewkblog.com/2025/03/16/i-built-myself-a-watch/","score":12,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/w05k9f/i_built_myself_watch","submitter_user":"mtlynch","user_is_author":false,"tags":["hardware"]},{"short_id":"dmuad3","short_id_url":"https://lobste.rs/s/dmuad3","created_at":"2025-03-17T06:10:11.000-05:00","title":"Mitigating SourceHut's partial outage caused by aggressive crawlers","url":"https://status.sr.ht/issues/2025-03-17-git.sr.ht-llms/","score":74,"flags":2,"comment_count":41,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/dmuad3/mitigating_sourcehut_s_partial_outage","submitter_user":"fratti","user_is_author":false,"tags":["ai"]},{"short_id":"0zz0ek","short_id_url":"https://lobste.rs/s/0zz0ek","created_at":"2025-03-17T05:59:43.000-05:00","title":"What are you doing this week?","url":"","score":10,"flags":0,"comment_count":21,"description":"\u003cp\u003eWhat are you doing this week? Feel free to share!\u003c/p\u003e\n\u003cp\u003eKeep in mind it’s OK to do nothing at all, too.\u003c/p\u003e\n","description_plain":"What are you doing this week? Feel free to share!\r\n\r\nKeep in mind it’s OK to do nothing at all, too.","comments_url":"https://lobste.rs/s/0zz0ek/what_are_you_doing_this_week","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"uz9tln","short_id_url":"https://lobste.rs/s/uz9tln","created_at":"2025-03-17T00:18:36.000-05:00","title":"V6 Shell","url":"https://v6sh.org/","score":5,"flags":0,"comment_count":10,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uz9tln/v6_shell","submitter_user":"Melkor333","user_is_author":false,"tags":["historical","retrocomputing","unix"]},{"short_id":"8k6sws","short_id_url":"https://lobste.rs/s/8k6sws","created_at":"2025-03-17T00:05:22.000-05:00","title":"Writing a SIGGRAPH paper (for fun) (2020)","url":"https://www.mattkeeter.com/projects/siggraph/","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/8k6sws/writing_siggraph_paper_for_fun_2020","submitter_user":"allie","user_is_author":false,"tags":["graphics"]},{"short_id":"2wd2wt","short_id_url":"https://lobste.rs/s/2wd2wt","created_at":"2025-03-16T22:19:52.000-05:00","title":"Learn Git Branching","url":"https://learngitbranching.js.org/","score":3,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2wd2wt/learn_git_branching","submitter_user":"veqq","user_is_author":false,"tags":["vcs"]},{"short_id":"1kxvjz","short_id_url":"https://lobste.rs/s/1kxvjz","created_at":"2025-03-16T22:15:40.000-05:00","title":"From Languages to Language Sets","url":"https://gist.github.com/xixixao/8e363dbd3663b6729cd5b6d74dbbf9d4","score":13,"flags":0,"comment_count":21,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/1kxvjz/from_languages_language_sets","submitter_user":"veqq","user_is_author":false,"tags":["plt"]},{"short_id":"12tkuj","short_id_url":"https://lobste.rs/s/12tkuj","created_at":"2025-03-16T22:02:11.000-05:00","title":"I Was a 1980s Teenage Programmer (2022)","url":"https://blog.startifact.com/posts/teenage-programmer-alphatronic/","score":7,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/12tkuj/i_was_1980s_teenage_programmer_2022","submitter_user":"jgayfer","user_is_author":false,"tags":["historical","programming"]},{"short_id":"abizxl","short_id_url":"https://lobste.rs/s/abizxl","created_at":"2025-03-16T20:43:38.000-05:00","title":"Dioxus | Fullstack crossplatform app framework for Rust","url":"https://dioxuslabs.com/","score":12,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/abizxl/dioxus_fullstack_crossplatform_app","submitter_user":"linkdd","user_is_author":false,"tags":["programming","rust"]},{"short_id":"grpayi","short_id_url":"https://lobste.rs/s/grpayi","created_at":"2025-03-16T19:45:12.000-05:00","title":"Zest: a programming language for malleable and legible systems","url":"https://github.com/jamii/zest","score":12,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/grpayi/zest_programming_language_for_malleable","submitter_user":"one-more-minute","user_is_author":false,"tags":["compilers","plt","zig"]},{"short_id":"lnliwt","short_id_url":"https://lobste.rs/s/lnliwt","created_at":"2025-03-16T18:59:15.000-05:00","title":"6502.sh: a 6502 emulator in Bourne shell","url":"https://codeberg.org/calebccff/6502.sh","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lnliwt/6502_sh_6502_emulator_bourne_shell","submitter_user":"lorddimwit","user_is_author":false,"tags":["retrocomputing","unix"]},{"short_id":"2a8x3n","short_id_url":"https://lobste.rs/s/2a8x3n","created_at":"2025-03-16T18:56:37.000-05:00","title":"Why we ditched Next.js and never looked back","url":"https://northflank.com/blog/why-we-ditched-next-js-and-never-looked-back","score":19,"flags":0,"comment_count":9,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2a8x3n/why_we_ditched_next_js_never_looked_back","submitter_user":"Jackevansevo","user_is_author":false,"tags":["javascript"]}]