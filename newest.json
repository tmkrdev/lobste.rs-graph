[{"short_id":"ijntue","short_id_url":"https://lobste.rs/s/ijntue","created_at":"2025-03-27T16:01:17.000-05:00","title":"Our own worst best customer","url":"https://antithesis.com/blog/2025/testing_pangolin/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ijntue/our_own_worst_best_customer","submitter_user":"amw-zero","user_is_author":false,"tags":["databases","distributed","testing"]},{"short_id":"qdlhnh","short_id_url":"https://lobste.rs/s/qdlhnh","created_at":"2025-03-27T15:36:56.000-05:00","title":"Meet Declarative Web Push","url":"https://webkit.org/blog/16535/meet-declarative-web-push/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qdlhnh/meet_declarative_web_push","submitter_user":"snej","user_is_author":false,"tags":["web"]},{"short_id":"wu99bl","short_id_url":"https://lobste.rs/s/wu99bl","created_at":"2025-03-27T15:29:29.000-05:00","title":"Experiential Robotics Platform moves out of beta phase","url":"https://news.sparkfun.com/13341","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wu99bl/experiential_robotics_platform_moves","submitter_user":"kaycebasques","user_is_author":false,"tags":["education","hardware","python","release","science"]},{"short_id":"atew8r","short_id_url":"https://lobste.rs/s/atew8r","created_at":"2025-03-27T15:13:54.000-05:00","title":"A Shell for the Container Age: Introducing Dagger Shell - Dagger","url":"https://dagger.io/blog/dagger-shell","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/atew8r/shell_for_container_age_introducing","submitter_user":"tsg","user_is_author":false,"tags":["linux"]},{"short_id":"oqbluo","short_id_url":"https://lobste.rs/s/oqbluo","created_at":"2025-03-27T14:36:39.000-05:00","title":"A Roadmap for a modern Plasma Login Manager","url":"https://blog.davidedmundson.co.uk/blog/a-roadmap-for-a-modern-plasma-login-manager/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/oqbluo/roadmap_for_modern_plasma_login_manager","submitter_user":"soni","user_is_author":false,"tags":["linux"]},{"short_id":"c0ezfx","short_id_url":"https://lobste.rs/s/c0ezfx","created_at":"2025-03-27T14:06:54.000-05:00","title":"Open Letter to Meta: Support True Messaging Interoperability with XMPP","url":"https://xmpp.org/announcements/open-letter-meta-dma/","score":6,"flags":0,"comment_count":5,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/c0ezfx/open_letter_meta_support_true_messaging","submitter_user":"gnafuthegreat","user_is_author":false,"tags":["law","web"]},{"short_id":"m9x2ka","short_id_url":"https://lobste.rs/s/m9x2ka","created_at":"2025-03-27T14:04:36.000-05:00","title":"oss-sec: Three bypasses of Ubuntu's unprivileged user namespace restrictions","url":"https://seclists.org/oss-sec/2025/q1/253","score":8,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/m9x2ka/oss_sec_three_bypasses_ubuntu_s","submitter_user":"eyberg","user_is_author":false,"tags":["devops","security"]},{"short_id":"aygeaq","short_id_url":"https://lobste.rs/s/aygeaq","created_at":"2025-03-27T13:14:18.000-05:00","title":"Atom vs. RSS (2013)","url":"https://nullprogram.com/blog/2013/09/23/","score":9,"flags":0,"comment_count":12,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/aygeaq/atom_vs_rss_2013","submitter_user":"janus","user_is_author":false,"tags":["browsers","web"]},{"short_id":"g8pxhy","short_id_url":"https://lobste.rs/s/g8pxhy","created_at":"2025-03-27T12:37:44.000-05:00","title":"Things that go wrong with disk IO","url":"https://notes.eatonphil.com/2025-03-27-things-that-go-wrong-with-disk-io.html","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/g8pxhy/things_go_wrong_with_disk_io","submitter_user":"eatonphil","user_is_author":true,"tags":["databases","linux"]},{"short_id":"wsyz6c","short_id_url":"https://lobste.rs/s/wsyz6c","created_at":"2025-03-27T12:20:31.000-05:00","title":"Oscura Vim Colorscheme ‚Äì New Variant \u0026 Improvements","url":"","score":-2,"flags":5,"comment_count":0,"description":"\u003cp\u003eHey fellow Vim/Neovim enthusiasts! üëã\u003c/p\u003e\n\u003cp\u003eWe‚Äôve got another exciting update to the Oscura colorscheme! This time, we‚Äôre bringing you:\u003c/p\u003e\n\u003cp\u003e‚úÖ A new variant ‚Äì Oscura Dusk üåÜ for a fresh, refined look\n‚úÖ Better TypeScript support üèóÔ∏è\n‚úÖ Further improvements to keep it in sync with the VS Code theme\u003c/p\u003e\n\u003cp\u003eIf you love a sleek, well-balanced colorscheme, give Oscura a try! Let us know your thoughts, and feel free to drop suggestions or feedback. üöÄ\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/vinitkumar/oscura-vim\" rel=\"ugc\"\u003ehttps://github.com/vinitkumar/oscura-vim\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e#Vim #NeoVim #Colorscheme #Oscura #DevTools\u003c/p\u003e\n","description_plain":"Hey fellow Vim/Neovim enthusiasts! üëã\r\n\r\nWe‚Äôve got another exciting update to the Oscura colorscheme! This time, we‚Äôre bringing you:\r\n\r\n‚úÖ A new variant ‚Äì Oscura Dusk üåÜ for a fresh, refined look\r\n‚úÖ Better TypeScript support üèóÔ∏è\r\n‚úÖ Further improvements to keep it in sync with the VS Code theme\r\n\r\nIf you love a sleek, well-balanced colorscheme, give Oscura a try! Let us know your thoughts, and feel free to drop suggestions or feedback. üöÄ\r\n\r\nhttps://github.com/vinitkumar/oscura-vim\r\n\r\n#Vim #NeoVim #Colorscheme #Oscura #DevTools","comments_url":"https://lobste.rs/s/wsyz6c/oscura_vim_colorscheme_new_variant","submitter_user":"vinitkme","user_is_author":true,"tags":["vim"]},{"short_id":"jtkw5y","short_id_url":"https://lobste.rs/s/jtkw5y","created_at":"2025-03-27T12:19:33.000-05:00","title":"Temporal analysis of lobste.rs tags","url":"https://gerikson.com/blog/comm/Lobsters-tags.html","score":2,"flags":0,"comment_count":2,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/jtkw5y/temporal_analysis_lobste_rs_tags","submitter_user":"veqq","user_is_author":false,"tags":["meta"]},{"short_id":"vmf72f","short_id_url":"https://lobste.rs/s/vmf72f","created_at":"2025-03-27T12:06:35.000-05:00","title":"Ruby Central's OSS Changelog: March 2025","url":"https://rubycentral.org/news/ruby-centrals-oss-changelog-march-2025/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vmf72f/ruby_central_s_oss_changelog_march_2025","submitter_user":"soulcutter","user_is_author":false,"tags":["release","ruby"]},{"short_id":"6ngygp","short_id_url":"https://lobste.rs/s/6ngygp","created_at":"2025-03-27T11:42:57.000-05:00","title":"Pile of Eternal Rejections: The Cost of Garbage Collection for State Machine Replication ‚Äì Aleksey Charapko","url":"https://charap.co/pile-of-eternal-rejections-the-cost-of-garbage-collection-for-state-machine-replication/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/6ngygp/pile_eternal_rejections_cost_garbage","submitter_user":"yorickpeterse","user_is_author":false,"tags":["performance","plt"]},{"short_id":"69ct0v","short_id_url":"https://lobste.rs/s/69ct0v","created_at":"2025-03-27T11:24:49.000-05:00","title":"Tag Proposal: logicprogramming","url":"","score":15,"flags":0,"comment_count":1,"description":"\u003cp\u003eLogic/constraint programming like Prolog, Datalog comes up enough to not need further justification.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eName: logicprogramming ; is there a shorter but still fitting term? ‚ÄúDeclarative‚Äù has a nicer shape, but I think it‚Äôs too broad. ‚ÄúRule-based‚Äù could work but it‚Äôs not common. Because there‚Äôs only a small space to work with, even logicprog seems tempting.\u003c/p\u003e\n\u003cp\u003eDescription: ‚ÄúProlog, Datalog, Horn clauses, Answer Set Programming‚Ä¶‚Äù ; Please help! This is key, because of the recommendation drop down. Unfortunately, relevant terms are all quite long (having programming at the end‚Ä¶) Currently, the longest is ‚Äú Lobsters-related bikeshedding - report bugs at \u003ca href=\"https://github.com/lobsters/lobsters\" rel=\"ugc\"\u003ehttps://github.com/lobsters/lobsters\u003c/a\u003e‚Äù.\u003c/p\u003e\n\u003cp\u003ecategory: compsci ; like formalmethods\u003c/p\u003e\n\u003cp\u003esimilar tags: formalmethods, databases ; there is also some bleed through with lisp (often the implementation language)\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eMostly recent candidates:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/odzx0k/curry_truly_integrated_functional_logic\" rel=\"ugc\"\u003ehttps://lobste.rs/s/odzx0k/curry_truly_integrated_functional_logic\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/v4cr5g/neurosymbolic_programming_with_scallop\" rel=\"ugc\"\u003ehttps://lobste.rs/s/v4cr5g/neurosymbolic_programming_with_scallop\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/angvuk/making_datalog_engine_clojure\" rel=\"ugc\"\u003ehttps://lobste.rs/s/angvuk/making_datalog_engine_clojure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/wooe50/databases_are_endgame_for_data_oriented\" rel=\"ugc\"\u003ehttps://lobste.rs/s/wooe50/databases_are_endgame_for_data_oriented\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/i5yyks/writing_worst_datalog_ever_26loc\" rel=\"ugc\"\u003ehttps://lobste.rs/s/i5yyks/writing_worst_datalog_ever_26loc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/akxfbm/c_plus_prolog\" rel=\"ugc\"\u003ehttps://lobste.rs/s/akxfbm/c_plus_prolog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/angvuk/making_datalog_engine_clojure\" rel=\"ugc\"\u003ehttps://lobste.rs/s/angvuk/making_datalog_engine_clojure\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/duredh/ciao_prolog_system_prolog\" rel=\"ugc\"\u003ehttps://lobste.rs/s/duredh/ciao_prolog_system_prolog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/jcsfbx/program_is_database_is_interface\" rel=\"ugc\"\u003ehttps://lobste.rs/s/jcsfbx/program_is_database_is_interface\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/jcjpnc/planning_weekly_workouts_100_lines\" rel=\"ugc\"\u003ehttps://lobste.rs/s/jcjpnc/planning_weekly_workouts_100_lines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/j61hod/search_next_great_programming_language\" rel=\"ugc\"\u003ehttps://lobste.rs/s/j61hod/search_next_great_programming_language\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/db8wcx/eve_programming_language\" rel=\"ugc\"\u003ehttps://lobste.rs/s/db8wcx/eve_programming_language\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/ihhb3x/native_compilation_prolog_predicates\" rel=\"ugc\"\u003ehttps://lobste.rs/s/ihhb3x/native_compilation_prolog_predicates\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/d029dt/porting_pfp_from_haskell_ocaml\" rel=\"ugc\"\u003ehttps://lobste.rs/s/d029dt/porting_pfp_from_haskell_ocaml\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/h4ij6z/use_prolog_for_developing_new\" rel=\"ugc\"\u003ehttps://lobste.rs/s/h4ij6z/use_prolog_for_developing_new\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/grpayi/zest_programming_language_for_malleable\" rel=\"ugc\"\u003ehttps://lobste.rs/s/grpayi/zest_programming_language_for_malleable\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/huujww/use_prolog_improve_llm_s_reasoning\" rel=\"ugc\"\u003ehttps://lobste.rs/s/huujww/use_prolog_improve_llm_s_reasoning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/ifbnmh/dusa_programming_language\" rel=\"ugc\"\u003ehttps://lobste.rs/s/ifbnmh/dusa_programming_language\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/nniiar/can_logic_programming_be_liberated_from\" rel=\"ugc\"\u003ehttps://lobste.rs/s/nniiar/can_logic_programming_be_liberated_from\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/eb8cgf/planner_programming_blows_my_mind\" rel=\"ugc\"\u003ehttps://lobste.rs/s/eb8cgf/planner_programming_blows_my_mind\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/r9xgu8/picat_3_6_released\" rel=\"ugc\"\u003ehttps://lobste.rs/s/r9xgu8/picat_3_6_released\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/mwsk2m/picat_logic_based_multi_paradigm_pl_for\" rel=\"ugc\"\u003ehttps://lobste.rs/s/mwsk2m/picat_logic_based_multi_paradigm_pl_for\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/wcddhk/programmation_par_contraintes\" rel=\"ugc\"\u003ehttps://lobste.rs/s/wcddhk/programmation_par_contraintes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/aade0u/using_z3_solve_logic_puzzles\" rel=\"ugc\"\u003ehttps://lobste.rs/s/aade0u/using_z3_solve_logic_puzzles\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/jv0b2v/solving_math_problem_with_planner\" rel=\"ugc\"\u003ehttps://lobste.rs/s/jv0b2v/solving_math_problem_with_planner\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/uybgwr/unexpected_discovery_automated\" rel=\"ugc\"\u003ehttps://lobste.rs/s/uybgwr/unexpected_discovery_automated\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/glcgko/creusat_formally_verified_sat_solver\" rel=\"ugc\"\u003ehttps://lobste.rs/s/glcgko/creusat_formally_verified_sat_solver\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/ky4li4/simply_typed_lambda_calculus_datalog\" rel=\"ugc\"\u003ehttps://lobste.rs/s/ky4li4/simply_typed_lambda_calculus_datalog\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSome older things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/kqsgmv/solving_miracle_sudoku_prolog\" rel=\"ugc\"\u003ehttps://lobste.rs/s/kqsgmv/solving_miracle_sudoku_prolog\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/hmgmq1/c_c_examining_hackage_logict\" rel=\"ugc\"\u003ehttps://lobste.rs/s/hmgmq1/c_c_examining_hackage_logict\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUnsure (I‚Äôm e.g. not sure where to draw the line between some applications or implementations of formal methods and this):\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/isc1qn/stop_your_business_rules_engines\" rel=\"ugc\"\u003ehttps://lobste.rs/s/isc1qn/stop_your_business_rules_engines\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/dtbswk/unexplanations_query_optimization\" rel=\"ugc\"\u003ehttps://lobste.rs/s/dtbswk/unexplanations_query_optimization\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/d9eebx/democratizing_software\" rel=\"ugc\"\u003ehttps://lobste.rs/s/d9eebx/democratizing_software\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/qvhwss/quint\" rel=\"ugc\"\u003ehttps://lobste.rs/s/qvhwss/quint\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lobste.rs/s/qcppwf/llms_don_t_do_formal_reasoning_is_huge\" rel=\"ugc\"\u003ehttps://lobste.rs/s/qcppwf/llms_don_t_do_formal_reasoning_is_huge\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n","description_plain":"Logic/constraint programming like Prolog, Datalog comes up enough to not need further justification.\r\n\r\n-------\r\n\r\nName: logicprogramming ; is there a shorter but still fitting term? \"Declarative\" has a nicer shape, but I think it's too broad. \"Rule-based\" could work but it's not common. Because there's only a small space to work with, even logicprog seems tempting.\r\n\r\nDescription: \"Prolog, Datalog, Horn clauses, Answer Set Programming...\" ; Please help! This is key, because of the recommendation drop down. Unfortunately, relevant terms are all quite long (having programming at the end...) Currently, the longest is \" Lobsters-related bikeshedding - report bugs at https://github.com/lobsters/lobsters\".\r\n\r\ncategory: compsci ; like formalmethods\r\n\r\nsimilar tags: formalmethods, databases ; there is also some bleed through with lisp (often the implementation language)\r\n\r\n-----\r\n\r\nMostly recent candidates:\r\n\r\n- https://lobste.rs/s/odzx0k/curry_truly_integrated_functional_logic\r\n- https://lobste.rs/s/v4cr5g/neurosymbolic_programming_with_scallop\r\n- https://lobste.rs/s/angvuk/making_datalog_engine_clojure\r\n- https://lobste.rs/s/wooe50/databases_are_endgame_for_data_oriented\r\n- https://lobste.rs/s/i5yyks/writing_worst_datalog_ever_26loc\r\n- https://lobste.rs/s/akxfbm/c_plus_prolog\r\n- https://lobste.rs/s/angvuk/making_datalog_engine_clojure\r\n- https://lobste.rs/s/duredh/ciao_prolog_system_prolog\r\n- https://lobste.rs/s/jcsfbx/program_is_database_is_interface\r\n- https://lobste.rs/s/jcjpnc/planning_weekly_workouts_100_lines\r\n- https://lobste.rs/s/j61hod/search_next_great_programming_language\r\n- https://lobste.rs/s/db8wcx/eve_programming_language\r\n- https://lobste.rs/s/ihhb3x/native_compilation_prolog_predicates\r\n- https://lobste.rs/s/d029dt/porting_pfp_from_haskell_ocaml\r\n- https://lobste.rs/s/h4ij6z/use_prolog_for_developing_new\r\n- https://lobste.rs/s/grpayi/zest_programming_language_for_malleable\r\n- https://lobste.rs/s/huujww/use_prolog_improve_llm_s_reasoning\r\n- https://lobste.rs/s/ifbnmh/dusa_programming_language\r\n- https://lobste.rs/s/nniiar/can_logic_programming_be_liberated_from\r\n- https://lobste.rs/s/eb8cgf/planner_programming_blows_my_mind\r\n- https://lobste.rs/s/r9xgu8/picat_3_6_released\r\n- https://lobste.rs/s/mwsk2m/picat_logic_based_multi_paradigm_pl_for\r\n- https://lobste.rs/s/wcddhk/programmation_par_contraintes\r\n- https://lobste.rs/s/aade0u/using_z3_solve_logic_puzzles\r\n- https://lobste.rs/s/jv0b2v/solving_math_problem_with_planner\r\n- https://lobste.rs/s/uybgwr/unexpected_discovery_automated\r\n- https://lobste.rs/s/glcgko/creusat_formally_verified_sat_solver\r\n- https://lobste.rs/s/ky4li4/simply_typed_lambda_calculus_datalog\r\n\r\nSome older things:\r\n- https://lobste.rs/s/kqsgmv/solving_miracle_sudoku_prolog\r\n- https://lobste.rs/s/hmgmq1/c_c_examining_hackage_logict\r\n\r\nUnsure (I'm e.g. not sure where to draw the line between some applications or implementations of formal methods and this):\r\n- https://lobste.rs/s/isc1qn/stop_your_business_rules_engines\r\n- https://lobste.rs/s/dtbswk/unexplanations_query_optimization\r\n- https://lobste.rs/s/d9eebx/democratizing_software\r\n- https://lobste.rs/s/qvhwss/quint\r\n- https://lobste.rs/s/qcppwf/llms_don_t_do_formal_reasoning_is_huge","comments_url":"https://lobste.rs/s/69ct0v/tag_proposal_logicprogramming","submitter_user":"veqq","user_is_author":true,"tags":["meta"]},{"short_id":"2tfh34","short_id_url":"https://lobste.rs/s/2tfh34","created_at":"2025-03-27T11:10:00.000-05:00","title":"Spade, a hardware description language inspired by modern software languages","url":"https://spade-lang.org/","score":12,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2tfh34/spade_hardware_description_language","submitter_user":"kaycebasques","user_is_author":false,"tags":["hardware","plt"]},{"short_id":"czhpip","short_id_url":"https://lobste.rs/s/czhpip","created_at":"2025-03-27T10:26:13.000-05:00","title":"‚ÄúNormal‚Äù engineers are the key to great teams","url":"https://spectrum.ieee.org/10x-engineer","score":11,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/czhpip/normal_engineers_are_key_great_teams","submitter_user":"startuplover99","user_is_author":false,"tags":["practices"]},{"short_id":"ztrpkk","short_id_url":"https://lobste.rs/s/ztrpkk","created_at":"2025-03-27T10:17:40.000-05:00","title":"Piranesi‚Äôs Perspective Trick","url":"https://medium.com/@brunopostle/piranesis-perspective-trick-6bcd7a754da9","score":18,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ztrpkk/piranesi_s_perspective_trick","submitter_user":"knl","user_is_author":false,"tags":["graphics"]},{"short_id":"v8llg0","short_id_url":"https://lobste.rs/s/v8llg0","created_at":"2025-03-27T09:52:59.000-05:00","title":"AI is the future of accessibility","url":"https://karlgroves.com/ai-is-the-future-of-accessibility/","score":1,"flags":1,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/v8llg0/ai_is_future_accessibility","submitter_user":"Kerrick","user_is_author":false,"tags":["a11y","ai"]},{"short_id":"097jkb","short_id_url":"https://lobste.rs/s/097jkb","created_at":"2025-03-27T09:36:56.000-05:00","title":"Why Anthropic‚Äôs Claude still hasn‚Äôt beaten Pok√©mon","url":"https://arstechnica.com/ai/2025/03/why-anthropics-claude-still-hasnt-beaten-pokemon/","score":3,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/097jkb/why_anthropic_s_claude_still_hasn_t_beaten","submitter_user":"eduard","user_is_author":false,"tags":["ai","games"]},{"short_id":"youq7y","short_id_url":"https://lobste.rs/s/youq7y","created_at":"2025-03-27T08:26:01.000-05:00","title":"How to Write Blog Posts that Developers Read","url":"https://refactoringenglish.com/chapters/write-blog-posts-developers-read/","score":26,"flags":4,"comment_count":19,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/youq7y/how_write_blog_posts_developers_read","submitter_user":"mtlynch","user_is_author":true,"tags":["practices"]},{"short_id":"vzpfuh","short_id_url":"https://lobste.rs/s/vzpfuh","created_at":"2025-03-27T06:57:33.000-05:00","title":"Building Standardized AI Tools with the Model Context Protocol (MCP)","url":"https://www.innoq.com/en/articles/2025/03/model-context-protocol/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vzpfuh/building_standardized_ai_tools_with","submitter_user":"youngbrioche","user_is_author":false,"tags":["ai","java"]},{"short_id":"gwczh4","short_id_url":"https://lobste.rs/s/gwczh4","created_at":"2025-03-27T06:45:47.000-05:00","title":"Elastic BBQ: Better Binary Quantization in Lucene \u0026 Elasticsearch","url":"https://www.elastic.co/search-labs/blog/better-binary-quantization-lucene-elasticsearch","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gwczh4/elastic_bbq_better_binary_quantization","submitter_user":"Mordo","user_is_author":false,"tags":["ai","performance"]},{"short_id":"7bjnli","short_id_url":"https://lobste.rs/s/7bjnli","created_at":"2025-03-27T05:37:50.000-05:00","title":"Writing Useful Documentation","url":"https://www.blog.philodev.one/posts/2024-07-writing-documentation/","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/7bjnli/writing_useful_documentation","submitter_user":"iggle","user_is_author":false,"tags":["practices"]},{"short_id":"ye8vcd","short_id_url":"https://lobste.rs/s/ye8vcd","created_at":"2025-03-27T04:50:25.000-05:00","title":"prepare()-ing for execution: a new API for process creation","url":"https://gist.github.com/clausecker/721cda7172b82c179032859f3216a8ee","score":25,"flags":0,"comment_count":11,"description":"\u003cp\u003eUNIX famously uses fork+exec to create processes, a simple API that is nevertheless quite tricky to use correctly and that comes with a bunch of problems. The alternative, spawn, as used by VMS, Windows NT and recently POSIX, fixes many of these issues but it overly complex and makes it hard to add new features.\u003c/p\u003e\n\u003cp\u003eprepare() is a proposed API to simplify process creation. When calling prepare(), the current thread enters ‚Äúpreparation state.‚Äù That means, a nascent process is created and the current thread is moved to the context of this process, but without changing memory maps (this is similar to how vfork() works). Inside the nascent process, you can configure the environment as desired and then call prep_execve() to execute a new program. On success, prep_execve() leaves preparation state, moving the current thread back to the parent‚Äôs process context and returns (!) the pid of the now grownup child. You can also use prep_exit() to abort the child without executing a new process, it similarly returns the pid of the now zombified child.\u003c/p\u003e\n\u003cp\u003eHere‚Äôs an example for executing a child with stdout redirected to /dev/null:\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eint stfu(char *prog, char *argv[]) {\n    if (prepare(NULL) == -1)\n        return (-1);\n\n    int fd = open(\"/dev/null\", O_WRONLY);\n    if (fd == -1) {\n        return (prep_exit(1));\n    }\n\n    dup2(fd, 1);\n    close(fd);\n\n    int pid = prep_execve(prog, argv, environ);\n    if (pid == -1) {\n        return (prep_exit(1));\n    }\n\n    return (pid);\n}\n\u003c/code\u003e\u003c/pre\u003e\n\u003cp\u003eThe key advantage of this API is that it has completely linear control flow like spawn, while preserving the flexible builder-pattern provided by fork+exec. No double-return shenanigans like with fork and execve. And because the nascent process shares memory with the parent, it‚Äôs possible to communicate failure to execute and similar stuff using simple variables.\u003c/p\u003e\n","description_plain":"UNIX famously uses fork+exec to create processes, a simple API that is nevertheless quite tricky to use correctly and that comes with a bunch of problems. The alternative, spawn, as used by VMS, Windows NT and recently POSIX, fixes many of these issues but it overly complex and makes it hard to add new features.\r\n\r\nprepare() is a proposed API to simplify process creation. When calling prepare(), the current thread enters ‚Äúpreparation state.‚Äù That means, a nascent process is created and the current thread is moved to the context of this process, but without changing memory maps (this is similar to how vfork() works). Inside the nascent process, you can configure the environment as desired and then call prep_execve() to execute a new program. On success, prep_execve() leaves preparation state, moving the current thread back to the parent's process context and returns (!) the pid of the now grownup child. You can also use prep_exit() to abort the child without executing a new process, it similarly returns the pid of the now zombified child.\r\n\r\nHere's an example for executing a child with stdout redirected to /dev/null:\r\n\r\n    int stfu(char *prog, char *argv[]) {\r\n        if (prepare(NULL) == -1)\r\n            return (-1);\r\n\r\n        int fd = open(\"/dev/null\", O_WRONLY);\r\n        if (fd == -1) {\r\n            return (prep_exit(1));\r\n        }\r\n\r\n        dup2(fd, 1);\r\n        close(fd);\r\n\r\n        int pid = prep_execve(prog, argv, environ);\r\n        if (pid == -1) {\r\n            return (prep_exit(1));\r\n        }\r\n\r\n        return (pid);\r\n    }\r\n\r\nThe key advantage of this API is that it has completely linear control flow like spawn, while preserving the flexible builder-pattern provided by fork+exec. No double-return shenanigans like with fork and execve. And because the nascent process shares memory with the parent, it's possible to communicate failure to execute and similar stuff using simple variables.","comments_url":"https://lobste.rs/s/ye8vcd/prepare_ing_for_execution_new_api_for","submitter_user":"fuz","user_is_author":true,"tags":["api","show","unix"]},{"short_id":"pntonn","short_id_url":"https://lobste.rs/s/pntonn","created_at":"2025-03-27T04:05:35.000-05:00","title":"War story: the hardest bug I ever debugged","url":"https://www.clientserver.dev/p/war-story-the-hardest-bug-i-ever","score":27,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/pntonn/war_story_hardest_bug_i_ever_debugged","submitter_user":"anunaym14","user_is_author":false,"tags":["debugging"]}]