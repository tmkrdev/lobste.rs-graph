[{"short_id":"aeut8o","short_id_url":"https://lobste.rs/s/aeut8o","created_at":"2025-01-31T04:48:43.000-06:00","title":"Blazing-Fast Directory Tree Traversal: Haskell Streamly Beats Rust","url":"https://www.youtube.com/watch?v=voy1iT2E4bk","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/aeut8o/blazing_fast_directory_tree_traversal","submitter_user":"gendx","user_is_author":false,"tags":["haskell","rust","video"]},{"short_id":"cayoei","short_id_url":"https://lobste.rs/s/cayoei","created_at":"2025-01-31T04:46:39.000-06:00","title":"What are you doing this weekend?","url":"","score":3,"flags":0,"comment_count":2,"description":"\u003cp\u003eFeel free to tell what you plan on doing this weekend and even ask for help or feedback.\u003c/p\u003e\n\u003cp\u003ePlease keep in mind it’s more than OK to do nothing at all too!\u003c/p\u003e\n","description_plain":"Feel free to tell what you plan on doing this weekend and even ask for help or feedback.\r\n\r\nPlease keep in mind it’s more than OK to do nothing at all too!","comments_url":"https://lobste.rs/s/cayoei/what_are_you_doing_this_weekend","submitter_user":"caius","user_is_author":true,"tags":["ask","programming"]},{"short_id":"xpwcbe","short_id_url":"https://lobste.rs/s/xpwcbe","created_at":"2025-01-31T04:45:48.000-06:00","title":"Rust's rand 0.9.0 is out","url":"https://github.com/rust-random/rand/releases/tag/0.9.0","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/xpwcbe/rust_s_rand_0_9_0_is_out","submitter_user":"gendx","user_is_author":false,"tags":["rust"]},{"short_id":"bpclm0","short_id_url":"https://lobste.rs/s/bpclm0","created_at":"2025-01-31T04:43:48.000-06:00","title":"nom parser combinators now released in version 8, with a new architecture","url":"https://github.com/rust-bakery/nom/blob/main/CHANGELOG.md#800-2025-01-25","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/bpclm0/nom_parser_combinators_now_released","submitter_user":"gendx","user_is_author":false,"tags":["rust"]},{"short_id":"rbjw6d","short_id_url":"https://lobste.rs/s/rbjw6d","created_at":"2025-01-31T04:42:07.000-06:00","title":"Announcing Rust 1.84.1","url":"https://blog.rust-lang.org/2025/01/30/Rust-1.84.1.html","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/rbjw6d/announcing_rust_1_84_1","submitter_user":"gendx","user_is_author":false,"tags":["rust"]},{"short_id":"wafwbh","short_id_url":"https://lobste.rs/s/wafwbh","created_at":"2025-01-31T04:04:12.000-06:00","title":"Gamedev.city: Game development-centric link aggregator","url":"https://gamedev.city/","score":2,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wafwbh/gamedev_city_game_development_centric","submitter_user":"ksynwa","user_is_author":false,"tags":["games"]},{"short_id":"asyabf","short_id_url":"https://lobste.rs/s/asyabf","created_at":"2025-01-31T03:59:51.000-06:00","title":"Falsehoods programmers believe about null pointers","url":"https://purplesyringa.moe/blog/falsehoods-programmers-believe-about-null-pointers/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/asyabf/falsehoods_programmers_believe_about","submitter_user":"bitfield","user_is_author":false,"tags":["c"]},{"short_id":"9xtd4v","short_id_url":"https://lobste.rs/s/9xtd4v","created_at":"2025-01-31T03:56:32.000-06:00","title":"Introducing Werk","url":"https://simonask.github.io/introducing-werk/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/9xtd4v/introducing_werk","submitter_user":"hedy","user_is_author":false,"tags":["release"]},{"short_id":"vevsem","short_id_url":"https://lobste.rs/s/vevsem","created_at":"2025-01-31T03:36:23.000-06:00","title":"Standard Schema","url":"https://standardschema.dev","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/vevsem/standard_schema","submitter_user":"alper","user_is_author":false,"tags":["javascript"]},{"short_id":"ebslg3","short_id_url":"https://lobste.rs/s/ebslg3","created_at":"2025-01-31T01:38:21.000-06:00","title":"Are second systems inevitable","url":"https://erikaker.com/posts/ba331206-1741-4b03-88b6-2d2baa33cf2d","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/ebslg3/are_second_systems_inevitable","submitter_user":"drmorr","user_is_author":false,"tags":["programming"]},{"short_id":"umnpte","short_id_url":"https://lobste.rs/s/umnpte","created_at":"2025-01-30T20:08:10.000-06:00","title":"Xerox Alto Source Code (2014)","url":"https://computerhistory.org/blog/xerox-alto-source-code/","score":7,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/umnpte/xerox_alto_source_code_2014","submitter_user":"ucirello","user_is_author":false,"tags":["retrocomputing"]},{"short_id":"2an1ay","short_id_url":"https://lobste.rs/s/2an1ay","created_at":"2025-01-30T19:54:09.000-06:00","title":"How Jane Street accidentally built a better build system for OCaml","url":"https://blog.janestreet.com/how-we-accidentally-built-a-better-build-system-for-ocaml-index/","score":23,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/2an1ay/how_jane_street_accidentally_built","submitter_user":"kaycebasques","user_is_author":false,"tags":["ml"]},{"short_id":"mdtfnm","short_id_url":"https://lobste.rs/s/mdtfnm","created_at":"2025-01-30T15:33:48.000-06:00","title":"Forest \u0026 Desert","url":"https://tidyfirst.substack.com/p/forest-and-desert","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mdtfnm/forest_desert","submitter_user":"ahobson","user_is_author":false,"tags":["practices"]},{"short_id":"mwfd4n","short_id_url":"https://lobste.rs/s/mwfd4n","created_at":"2025-01-30T15:16:53.000-06:00","title":"Contracts for C++ explained in 5 minutes","url":"https://timur.audio/contracts_explained_in_5_mins","score":8,"flags":0,"comment_count":6,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/mwfd4n/contracts_for_c_explained_5_minutes","submitter_user":"raymii","user_is_author":false,"tags":["c++"]},{"short_id":"qyypzo","short_id_url":"https://lobste.rs/s/qyypzo","created_at":"2025-01-30T14:39:47.000-06:00","title":"DeepSeek database leak","url":"https://www.wiz.io/blog/wiz-research-uncovers-exposed-deepseek-database-leak","score":27,"flags":0,"comment_count":0,"description":"\u003cp\u003eWiz Research Uncovers Exposed DeepSeek Database Leaking Sensitive Information, Including Chat History\u003c/p\u003e\n","description_plain":"Wiz Research Uncovers Exposed DeepSeek Database Leaking Sensitive Information, Including Chat History","comments_url":"https://lobste.rs/s/qyypzo/deepseek_database_leak","submitter_user":"dgv","user_is_author":false,"tags":["security"]},{"short_id":"gvhivz","short_id_url":"https://lobste.rs/s/gvhivz","created_at":"2025-01-30T14:34:24.000-06:00","title":"The surprising way to save memory with BytesIO","url":"https://pythonspeed.com/articles/bytesio-reduce-memory-usage/","score":20,"flags":1,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/gvhivz/surprising_way_save_memory_with_bytesio","submitter_user":"itamarst","user_is_author":true,"tags":["performance","python"]},{"short_id":"y5n3mq","short_id_url":"https://lobste.rs/s/y5n3mq","created_at":"2025-01-30T12:54:32.000-06:00","title":"Have AI resolve your merge/rebase conflicts","url":"https://sketch.dev/blog/merde","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/y5n3mq/have_ai_resolve_your_merge_rebase","submitter_user":"carlana","user_is_author":false,"tags":["ai","vcs"]},{"short_id":"kh4fqk","short_id_url":"https://lobste.rs/s/kh4fqk","created_at":"2025-01-30T12:45:32.000-06:00","title":"Practical Pigment Mixing for Digital Painting (2021)","url":"https://scrtwpns.com/mixbox.pdf","score":5,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/kh4fqk/practical_pigment_mixing_for_digital","submitter_user":"calvin","user_is_author":false,"tags":["graphics","pdf"]},{"short_id":"3harxm","short_id_url":"https://lobste.rs/s/3harxm","created_at":"2025-01-30T12:41:26.000-06:00","title":"Introducing sealed types","url":"https://cheriot.org/sealing/compiler/2025/01/30/introducing-sealed-types.html","score":7,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/3harxm/introducing_sealed_types","submitter_user":"calvin","user_is_author":false,"tags":["plt"]},{"short_id":"fbhuou","short_id_url":"https://lobste.rs/s/fbhuou","created_at":"2025-01-30T11:47:33.000-06:00","title":"Ranking Programming Languages by Energy Efficiency","url":"https://haslab.github.io/SAFER/scp21.pdf","score":6,"flags":2,"comment_count":8,"description":"\u003cp\u003eThis paper compares a large set of programming languages regarding their efficiency, including from an energetic point-of-view. Indeed, we seek to establish and analyze different rankings for programming languages based on their energy efficiency. The goal of being able to rank programming languages based on their energy efficiency is both recent, and certainly deserves further studies. We have taken rigorous and strict solutions to 10 well defined programming problems, expressed in (up to) 27 programming languages, from the well known Computer Language Benchmark Game repository. This repository aims to compare programming languages based on a strict set of implementation rules and configurations for each benchmarking problem. We have also built a framework to automatically, and systematically, run, measure and compare the energy, time, and memory efficiency of such solutions. Ultimately, it is based on such comparisons that we propose a series of efficiency rankings, based on single and multiple criteria.\u003c/p\u003e\n\u003cp\u003eOur results show interesting findings, such as how slower/faster languages can consume less/more energy, and how memory usage influences energy consumption. We also present a simple way to use our results to provide software engineers and practitioners support in deciding which language to use when energy efficiency is a concern.\u003c/p\u003e\n\u003cp\u003eIn addition, we further validate our results and rankings against implementations from a chrestomathy program repository, Rosetta Code., by reproducing our methodology and benchmarking system. This allows us to understand how the results and conclusions from our rigorously and well defined benchmarked programs compare to those based on more representative and real-world implementations. Indeed our results show that the rankings do not change apart from one programming language.\u003c/p\u003e\n","description_plain":"This paper compares a large set of programming languages regarding their efficiency, including from an energetic point-of-view. Indeed, we seek to establish and analyze different rankings for programming languages based on their energy efficiency. The goal of being able to rank programming languages based on their energy efficiency is both recent, and certainly deserves further studies. We have taken rigorous and strict solutions to 10 well defined programming problems, expressed in (up to) 27 programming languages, from the well known Computer Language Benchmark Game repository. This repository aims to compare programming languages based on a strict set of implementation rules and configurations for each benchmarking problem. We have also built a framework to automatically, and systematically, run, measure and compare the energy, time, and memory efficiency of such solutions. Ultimately, it is based on such comparisons that we propose a series of efficiency rankings, based on single and multiple criteria.\r\n\r\nOur results show interesting findings, such as how slower/faster languages can consume less/more energy, and how memory usage influences energy consumption. We also present a simple way to use our results to provide software engineers and practitioners support in deciding which language to use when energy efficiency is a concern.\r\n\r\nIn addition, we further validate our results and rankings against implementations from a chrestomathy program repository, Rosetta Code., by reproducing our methodology and benchmarking system. This allows us to understand how the results and conclusions from our rigorously and well defined benchmarked programs compare to those based on more representative and real-world implementations. Indeed our results show that the rankings do not change apart from one programming language.","comments_url":"https://lobste.rs/s/fbhuou/ranking_programming_languages_by_energy","submitter_user":"lim","user_is_author":false,"tags":["compsci","pdf","performance"]},{"short_id":"lhn4sy","short_id_url":"https://lobste.rs/s/lhn4sy","created_at":"2025-01-30T10:38:29.000-06:00","title":"Why I use Cline for AI Engineering","url":"https://addyo.substack.com/p/why-i-use-cline-for-ai-engineering","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/lhn4sy/why_i_use_cline_for_ai_engineering","submitter_user":"kracekumar","user_is_author":false,"tags":["ai","practices"]},{"short_id":"uggzag","short_id_url":"https://lobste.rs/s/uggzag","created_at":"2025-01-30T10:31:34.000-06:00","title":"Adding garbage collection to our Rust-based interpreters with MMTk","url":"https://octavelarose.github.io/2025/01/30/mmtk.html","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/uggzag/adding_garbage_collection_our_rust_based","submitter_user":"Celeritas","user_is_author":false,"tags":["rust"]},{"short_id":"wxoydf","short_id_url":"https://lobste.rs/s/wxoydf","created_at":"2025-01-30T10:28:49.000-06:00","title":"Scaling Our Rate Limits to Prepare for a Billion Active Certificates","url":"https://letsencrypt.org/2025/01/30/scaling-rate-limits/","score":3,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/wxoydf/scaling_our_rate_limits_prepare_for","submitter_user":"fanf","user_is_author":false,"tags":["security"]},{"short_id":"cglras","short_id_url":"https://lobste.rs/s/cglras","created_at":"2025-01-30T10:15:25.000-06:00","title":"The Slow Death of OCSP","url":"https://www.feistyduck.com/newsletter/issue_121_the_slow_death_of_ocsp","score":10,"flags":0,"comment_count":3,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/cglras/slow_death_ocsp","submitter_user":"fanf","user_is_author":false,"tags":["security"]},{"short_id":"qbgec0","short_id_url":"https://lobste.rs/s/qbgec0","created_at":"2025-01-30T09:57:22.000-06:00","title":"PyPI Now Supports Project Archival","url":"https://blog.pypi.org/posts/2025-01-30-archival/","score":8,"flags":0,"comment_count":1,"description":"","description_plain":"","comments_url":"https://lobste.rs/s/qbgec0/pypi_now_supports_project_archival","submitter_user":"yossarian","user_is_author":false,"tags":["python"]}]