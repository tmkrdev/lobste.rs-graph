[{"short_id":"mq1sfz","created_at":"2025-06-08T10:54:13.000-05:00","title":"How PieFed federates \"flair\" on posts and comments","url":"https://join.piefed.social/2025/05/10/how-piefed-federates-flair-on-posts-and-comments/","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"PuercoPop","user_is_author":false,"tags":["distributed","web"],"short_id_url":"https://lobste.rs/s/mq1sfz","comments_url":"https://lobste.rs/s/mq1sfz/how_piefed_federates_flair_on_posts"},{"short_id":"snhi5l","created_at":"2025-06-08T10:34:46.000-05:00","title":"If Virtual Threads are the solution, what is the problem? (2023)","url":"https://webtide.com/if-virtual-threads-are-the-solution-what-is-the-problem/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"unwind","user_is_author":false,"tags":["java","performance"],"short_id_url":"https://lobste.rs/s/snhi5l","comments_url":"https://lobste.rs/s/snhi5l/if_virtual_threads_are_solution_what_is"},{"short_id":"atchtb","created_at":"2025-06-08T10:32:13.000-05:00","title":"Context7: Up-to-date documentation for LLMs and AI code editors","url":"https://context7.com/","score":2,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"hongminhee","user_is_author":false,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/atchtb","comments_url":"https://lobste.rs/s/atchtb/context7_up_date_documentation_for_llms"},{"short_id":"h72rfa","created_at":"2025-06-08T10:20:19.000-05:00","title":"105 vibe-coded tools","url":"https://tools.simonwillison.net/colophon","score":6,"flags":2,"comment_count":0,"description":"","description_plain":"","submitter_user":"azhenley","user_is_author":false,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/h72rfa","comments_url":"https://lobste.rs/s/h72rfa/105_vibe_coded_tools"},{"short_id":"vi3z47","created_at":"2025-06-08T08:20:49.000-05:00","title":"Weaponizing Dependabot: Pwn Request at its finest","url":"https://boostsecurity.io/blog/weaponizing-dependabot-pwn-request-at-its-finest","score":4,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"fanf","user_is_author":false,"tags":["security"],"short_id_url":"https://lobste.rs/s/vi3z47","comments_url":"https://lobste.rs/s/vi3z47/weaponizing_dependabot_pwn_request_at"},{"short_id":"wnkajf","created_at":"2025-06-08T07:36:34.000-05:00","title":"binfmtc - binfmt_misc C scripting interface","url":"https://www.netfort.gr.jp/~dancer/software/binfmtc.html.en","score":1,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"franta","user_is_author":false,"tags":["c","linux"],"short_id_url":"https://lobste.rs/s/wnkajf","comments_url":"https://lobste.rs/s/wnkajf/binfmtc_binfmt_misc_c_scripting"},{"short_id":"xxoxwe","created_at":"2025-06-08T07:26:12.000-05:00","title":"Ditching HAProxy (in my homelab)","url":"https://arch.dog/bark/ditching-haproxy","score":6,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"gmem","user_is_author":true,"tags":["devops","networking"],"short_id_url":"https://lobste.rs/s/xxoxwe","comments_url":"https://lobste.rs/s/xxoxwe/ditching_haproxy_my_homelab"},{"short_id":"uke2hv","created_at":"2025-06-08T07:16:57.000-05:00","title":"Thank You, DataFusion: Queries in Rust, Without the Pain","url":"http://pierrezemb.fr/posts/thank-you-datafusion/","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"emschwartz","user_is_author":false,"tags":["databases","rust"],"short_id_url":"https://lobste.rs/s/uke2hv","comments_url":"https://lobste.rs/s/uke2hv/thank_you_datafusion_queries_rust"},{"short_id":"ydtluy","created_at":"2025-06-08T04:30:44.000-05:00","title":"The Illusion of Thinking: Understanding the Strengths and Limitations of Reasoning Models via the Lens of Problem Complexity","url":"https://machinelearning.apple.com/research/illusion-of-thinking","score":9,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"ninakali","user_is_author":false,"tags":["ai"],"short_id_url":"https://lobste.rs/s/ydtluy","comments_url":"https://lobste.rs/s/ydtluy/illusion_thinking_understanding"},{"short_id":"1owxr1","created_at":"2025-06-08T03:48:57.000-05:00","title":"Too Many Open Files","url":"https://mattrighetti.com/2025/06/04/too-many-files-open","score":6,"flags":1,"comment_count":3,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["unix"],"short_id_url":"https://lobste.rs/s/1owxr1","comments_url":"https://lobste.rs/s/1owxr1/too_many_open_files"},{"short_id":"6vr8ih","created_at":"2025-06-08T03:36:44.000-05:00","title":"Why not use the new MTA-STS?","url":"https://www.bsdhowto.ch/mtasts.html","score":4,"flags":1,"comment_count":11,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["networking","security"],"short_id_url":"https://lobste.rs/s/6vr8ih","comments_url":"https://lobste.rs/s/6vr8ih/why_not_use_new_mta_sts"},{"short_id":"dnt514","created_at":"2025-06-08T03:34:21.000-05:00","title":"Why not use DNS over HTTPS (DoH)?","url":"https://www.bsdhowto.ch/doh.html","score":14,"flags":2,"comment_count":16,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["networking","rant"],"short_id_url":"https://lobste.rs/s/dnt514","comments_url":"https://lobste.rs/s/dnt514/why_not_use_dns_over_https_doh"},{"short_id":"uh7lh2","created_at":"2025-06-08T03:24:14.000-05:00","title":"Shell scripting in C","url":"https://sebastiano.tronto.net/blog/2024-09-20-c-scripting/","score":6,"flags":1,"comment_count":5,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["c","unix"],"short_id_url":"https://lobste.rs/s/uh7lh2","comments_url":"https://lobste.rs/s/uh7lh2/shell_scripting_c"},{"short_id":"ofxowp","created_at":"2025-06-08T03:20:48.000-05:00","title":"Getting started with Qt, without the nonsense","url":"https://sebastiano.tronto.net/blog/2025-04-04-qt-minimal/","score":8,"flags":1,"comment_count":6,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["graphics","programming"],"short_id_url":"https://lobste.rs/s/ofxowp","comments_url":"https://lobste.rs/s/ofxowp/getting_started_with_qt_without_nonsense"},{"short_id":"nmamw0","created_at":"2025-06-08T03:13:32.000-05:00","title":"A masochist's guide to web development","url":"https://sebastiano.tronto.net/blog/2025-06-06-webdev/","score":2,"flags":1,"comment_count":0,"description":"","description_plain":"","submitter_user":"runxiyu","user_is_author":false,"tags":["c","wasm","web"],"short_id_url":"https://lobste.rs/s/nmamw0","comments_url":"https://lobste.rs/s/nmamw0/masochist_s_guide_web_development"},{"short_id":"dki3rs","created_at":"2025-06-07T21:20:09.000-05:00","title":"Performance of random floats","url":"https://dotat.at/@/2025-06-08-floats.html","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"fanf","user_is_author":true,"tags":["performance"],"short_id_url":"https://lobste.rs/s/dki3rs","comments_url":"https://lobste.rs/s/dki3rs/performance_random_floats"},{"short_id":"gjvk52","created_at":"2025-06-07T21:00:13.000-05:00","title":"Einops","url":"https://einops.rocks","score":3,"flags":0,"comment_count":0,"description":"","description_plain":"","submitter_user":"kaycebasques","user_is_author":false,"tags":["ai","python"],"short_id_url":"https://lobste.rs/s/gjvk52","comments_url":"https://lobste.rs/s/gjvk52/einops"},{"short_id":"1u6prg","created_at":"2025-06-07T20:47:25.000-05:00","title":"A plan for SIMD","url":"https://linebender.org/blog/a-plan-for-simd/","score":10,"flags":0,"comment_count":3,"description":"","description_plain":"","submitter_user":"itamarst","user_is_author":false,"tags":["performance","rust"],"short_id_url":"https://lobste.rs/s/1u6prg","comments_url":"https://lobste.rs/s/1u6prg/plan_for_simd"},{"short_id":"xhtiut","created_at":"2025-06-07T17:43:58.000-05:00","title":"Making Sense of Acquire-Release Semantics (2023)","url":"https://davekilian.com/acquire-release.html","score":4,"flags":0,"comment_count":2,"description":"","description_plain":"","submitter_user":"aminom","user_is_author":false,"tags":["c"],"short_id_url":"https://lobste.rs/s/xhtiut","comments_url":"https://lobste.rs/s/xhtiut/making_sense_acquire_release_semantics"},{"short_id":"15wvld","created_at":"2025-06-07T16:05:32.000-05:00","title":"MCP vs API","url":"https://glama.ai/blog/2025-06-06-mcp-vs-api","score":8,"flags":1,"comment_count":9,"description":"","description_plain":"","submitter_user":"punkpeye","user_is_author":true,"tags":["vibecoding"],"short_id_url":"https://lobste.rs/s/15wvld","comments_url":"https://lobste.rs/s/15wvld/mcp_vs_api"},{"short_id":"b9vkel","created_at":"2025-06-07T15:53:58.000-05:00","title":"xq: Query XML data using XPath","url":"https://github.com/linkdd/xq","score":23,"flags":0,"comment_count":8,"description":"","description_plain":"","submitter_user":"linkdd","user_is_author":true,"tags":["go","programming","show"],"short_id_url":"https://lobste.rs/s/b9vkel","comments_url":"https://lobste.rs/s/b9vkel/xq_query_xml_data_using_xpath"},{"short_id":"8gp15d","created_at":"2025-06-07T14:49:02.000-05:00","title":"Bill Atkinson Dies From Cancer at 74","url":"https://daringfireball.net/linked/2025/06/07/bill-atkinson-rip","score":80,"flags":0,"comment_count":6,"description":"","description_plain":"","submitter_user":"snej","user_is_author":false,"tags":["mac","person"],"short_id_url":"https://lobste.rs/s/8gp15d","comments_url":"https://lobste.rs/s/8gp15d/bill_atkinson_dies_from_cancer_at_74"},{"short_id":"e8abqn","created_at":"2025-06-07T12:46:55.000-05:00","title":"How can one write blazing fast yet useful compilers (for lazy pure functional languages)?","url":"","score":28,"flags":1,"comment_count":45,"description":"\u003cp\u003eI’ve decided enough is enough and I want to write my own compiler (seems I caught a bug and lobste.rs is definitely not discouraging it). The language I have in mind is a basic (lazy?) statically-typed pure functional programming language with do notation and records (i.e. mostly Haskell-lite).\u003c/p\u003e\n\u003cp\u003eI have other ideas I’d like to explore as well, but mainly, I want the compiler to be so fast (w/ optimisations) that people think there must have been a glitch; a cold build, including linking, of hundreds of thousands of lines in tens of milliseconds on a five-year-old mid-range laptop.\u003c/p\u003e\n\u003cp\u003eThe question I have is: what do I need to do at every level to pull this off? From lexing and parsing through typechecking and optimisation to interpretation and/or code generation, etc.\u003c/p\u003e\n\u003cp\u003eThere’s lots out there about writing compilers, even fast parsers, but not a lot that focuses on performance of the latter phases of a compiler. Any techniques, resources, information, or advice on writing fast compilers would be appreciated.\u003c/p\u003e\n\u003cp\u003eProbably a lot of this doesn’t matter immediately as I can piecemeal replace modules or optimise their performance after getting things working, but I’d like to get ideas in advance and know what to look up instead of asking about each part as I get to it.\u003c/p\u003e\n\u003cp\u003eAnyway, my other major constraints are indentation-sensitive syntax, reusability of components for LSPs, formatters, linters, etc. (as well as possibly exposing it in my language’s stdlib), plus quick and easy fairly portable bootstrapping of the compiler itself from any machine with a basic toolchain, which basically forces C on me.\u003c/p\u003e\n\u003cp\u003eI’m thinking of creating a whole separate post for that, on how best to avoid getting burnt by undefined behaviour especially. It may even be worth giving up on the goal of easy bootstrapping to avoid writing in such an insanely risky language (albeit with fuzzers, extensive testing of various types, and so on).\u003c/p\u003e\n\u003cp\u003eSticking to the performance question, though, this is getting a bit long, so I’ll post a comment about what I’m thinking and some of the questions that are rattling in my head for each stage.\u003c/p\u003e\n","description_plain":"I've decided enough is enough and I want to write my own compiler (seems I caught a bug and lobste.rs is definitely not discouraging it). The language I have in mind is a basic (lazy?) statically-typed pure functional programming language with do notation and records (i.e. mostly Haskell-lite).\r\n\r\nI have other ideas I'd like to explore as well, but mainly, I want the compiler to be so fast (w/ optimisations) that people think there must have been a glitch; a cold build, including linking, of hundreds of thousands of lines in tens of milliseconds on a five-year-old mid-range laptop.\r\n\r\nThe question I have is: what do I need to do at every level to pull this off? From lexing and parsing through typechecking and optimisation to interpretation and/or code generation, etc.\r\n\r\nThere's lots out there about writing compilers, even fast parsers, but not a lot that focuses on performance of the latter phases of a compiler. Any techniques, resources, information, or advice on writing fast compilers would be appreciated.\r\n\r\nProbably a lot of this doesn't matter immediately as I can piecemeal replace modules or optimise their performance after getting things working, but I'd like to get ideas in advance and know what to look up instead of asking about each part as I get to it.\r\n\r\nAnyway, my other major constraints are indentation-sensitive syntax, reusability of components for LSPs, formatters, linters, etc. (as well as possibly exposing it in my language's stdlib), plus quick and easy fairly portable bootstrapping of the compiler itself from any machine with a basic toolchain, which basically forces C on me.\r\n\r\nI'm thinking of creating a whole separate post for that, on how best to avoid getting burnt by undefined behaviour especially. It may even be worth giving up on the goal of easy bootstrapping to avoid writing in such an insanely risky language (albeit with fuzzers, extensive testing of various types, and so on).\r\n\r\nSticking to the performance question, though, this is getting a bit long, so I'll post a comment about what I'm thinking and some of the questions that are rattling in my head for each stage.","submitter_user":"habibalamin","user_is_author":true,"tags":["ask","compilers","performance"],"short_id_url":"https://lobste.rs/s/e8abqn","comments_url":"https://lobste.rs/s/e8abqn/how_can_one_write_blazing_fast_yet_useful"},{"short_id":"ntsbnt","created_at":"2025-06-07T12:02:09.000-05:00","title":"memvid: Video-based AI memory library","url":"https://github.com/Olow304/memvid","score":4,"flags":1,"comment_count":7,"description":"","description_plain":"","submitter_user":"jdh","user_is_author":false,"tags":["ai"],"short_id_url":"https://lobste.rs/s/ntsbnt","comments_url":"https://lobste.rs/s/ntsbnt/memvid_video_based_ai_memory_library"},{"short_id":"an5g0c","created_at":"2025-06-07T11:57:32.000-05:00","title":"Astonishing discovery by computer scientist: how to squeeze space into time","url":"https://www.youtube.com/watch?v=8JuWdXrCmWg","score":7,"flags":0,"comment_count":3,"description":"","description_plain":"","submitter_user":"james","user_is_author":false,"tags":["compsci","video"],"short_id_url":"https://lobste.rs/s/an5g0c","comments_url":"https://lobste.rs/s/an5g0c/astonishing_discovery_by_computer"}]